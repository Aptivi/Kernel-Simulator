(*MAN START*)

-TITLE:Guia de modifica????o de tela
-REVISION:0.0.1
-KSLAYOUT:0.0.5.9-OR-ABOVE

-BODY START-
Qual ?? o protetor de tela para o kernel?

O protetor de tela ?? o processo ocioso que ser?? ativado se o computador ficar ocioso. 

O protetor de tela tamb??m pode ser personalizado, e n??s vamos ensin??-lo a fazer o seu primeiro screensaver, para fazer a partir do screensaver mais simples para os lend??rios.

Modding b??sico (screensaver)

0. Como criar seus pr??prios protetores de tela no Visual Studio 2017?

1. Repita os passos 1-8 do guia de Modding
2. Na se????o Compile, clique em Build Events e, em seguida, escreva isso na linha de comando do evento Post-build:
	- copy ..\..\ModFile.vb ..\..\..\..\ModFileSS.m (Coloque SS antes do .m para que o KS o reconhe??a como protetor de tela e n??o como mod)
	- del /Q *.* (para ter certeza de que n??o h?? arquivos DLL sendo criados, j?? que n??o usamos DLLs para mods)
3. Repita os passos 9-16 a partir do guia de mods, mas substitua o KS.ModParser importa????es com importa????es KS.Screensaver
4. Entre as classes Public Class ... e End Class, deixe que o Visual Studio 2017 saiba que voc?? criar?? seu protetor de tela KS escrevendo: Implements ICustomSaver
5. Se voc?? for adicionar namespaces, essas regras dever??o ser atendidas:
	1) N??o importe o KS sozinho. 
	2) Ao importar m??dulos / classes como TextWriterColor, est?? escrito assim: Importa o KS.TextWriterColor
6. Defina propriedades para informa????es de modifica????o, colocando abaixo o Implements IScript:
    Property Initialized As Boolean Implements ICustomSaver.Initialized
7. Fa??a o seu protetor de tela de inicializa????o sub chamado InitSaver () que implementa o ICustomSaver.InitSaver, escrevendo:
    Sub InitSaver() Implements ICustomSaver.InitSaver
        'Your code here
	Initialized = True 'Put it anywhere in the sub if you're making If conditions, otherwise, leave it here.
    End Sub
8. Substitua todo seu c??digo aqui comentar com seu c??digo. 
9. Fa??a sua pr??-exibi????o (chamada antes de exibir a prote????o de tela) chamada PreDisplay () que implementa o ICustomSaver.PreDisplay, escrevendo:
    Sub PreDisplay() Implements ICustomSaver.PreDisplay
        'Your code here
    End Sub
10. Fa??a o seu c??digo de exibi????o (ele deve exibir algo) com o nome sub-escrito ScrnSaver () que implementa o ICustomSaver.ScrnSaver, escrevendo:
    Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
        'Your code here
    End Sub
11. Voc?? pode fazer seus subs em qualquer lugar da classe, mas se:
	1) eles est??o na classe diferente, pressione Enter na classe End e fa??a uma nova classe p??blica que armazene novos subs:
		Public Class AnotherClass
			'Suas defini????es abaixo, e assim seus subs, fun????es, interfaces, etc.
		End Class
	2) eles est??o tentando reinicializar o protetor de tela chamando InitSaver (), tente primeiro no ambiente de teste, depois no ambiente de produ????o, se isso funcionou corretamente.
	E as seguintes condi????es devem ser atendidas:
	1) Eles n??o devem fazer um loop infinito, a menos que voc?? os esteja fazendo, se as condi????es especificadas forem cumpridas.
	2) Eles n??o devem tentar causar erros no kernel.
	3) Coloque sua subchamada em um dos tr??s subs que implementam a interface ICustomSaver. 
12. Execute a constru????o. 
13. Execute o seu Simulador de Kernel que voc?? acabou de referenciar em seu projeto, e carregue, defina o padr??o e bloqueie o seu scren e seu protetor de tela est?? l??.

1. Mensagens na caixa do console e mensagens em breve, noturno ou rude (v?? embora ...)

O protetor de tela da caixa de mensagem de retorno informa ??s pessoas que o propriet??rio do computador desapareceu ou o propriet??rio informa que elas devem desaparecer porque h?? coisas importantes acontecendo em seus computadores. 

1. Clique com o bot??o direito no projeto e v?? para Add> Class
2. Nomeie seu protetor de tela, mas deixe o .vb intacto. 
3. Clique em Adicionar e o c??digo estar?? pronto.
4. Escreva abaixo do (Suponha que o seu nome mod seja SOR) Public Class SOR: Implementa ICustomSaver
5. Escreva acima da classe p??blica SOR:
   - Imports System
   - Imports System.Threading
   - Imports KS.Screensaver
   - Imports KS.TextWriterColor
   - Imports KS.Login
6. Voc?? deve receber erros dizendo que esses subs devem ser criados.
7. Fa??a o seu manipulador de eventos start screensaver escrevendo:
    Property Initialized As Boolean Implements ICustomSaver.Initialized
    Sub InitSaver() Implements ICustomSaver.InitSaver
	W("Load this screensaver using ""loadsaver SORSS.m"" and ""setsaver SORSS.m""", True, "neutralText")
        Initialized = True
    End Sub
8. Como n??o estamos implementando nada antes de exibir a prote????o de tela, deixaremos isso em branco:
    Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
9. Escreva acima da propriedade inicializada ...:
	Public SOR_Random As New Random () 'Inicializa o gerador de n??meros aleat??rios
	Public S_Random As New Random () 'Inicializa o gerador de n??meros aleat??rios
	Public O_Random As New Random () 'Inicializa o gerador de n??meros aleat??rios
	Public R_Random As New Random () 'Inicializa o gerador de n??meros aleat??rios
9. Escreva no sub-item ScrnSaver ():
    Console.Clear()
    If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
        Exit For
    End If
    Dim SOR_Integer As Integer = SOR_Random.Next(1, 4) 'Chooses whether it's Soon, Overnight or Rude
    Dim Soon_MsgID As Integer = SOR_Random.Next(0, 2) 'Selects messages in the Soon array
    Dim Over_MsgID As Integer = SOR_Random.Next(0, 2) 'Selects messages in the Overnight array
    Dim Rude_MsgID As Integer = SOR_Random.Next(0, 3) 'Selects messages in the Rude array
    Console.SetWindowPosition(0, 1)
    Select Case SOR_Integer
        Case 1 'Soon
            WriteMsg(SOR_Integer, Soon_MsgID)
        Case 2 'Overnight
            WriteMsg(SOR_Integer, Over_MsgID)
        Case 3 'Rude
            WriteMsg(SOR_Integer, Rude_MsgID)
    End Select
    Thread.Sleep(10000)
11. Voc?? pode precisar criar 1 fun????o e 2 subs para isso funcionar. 
    Public Shared Function ParsePlaces(ByVal text As String)
        text = text.Replace("<OWNER>", signedinusrnm)
        Return text
    End Function
    Public Shared Sub InitializeBar(ByVal strlen As Integer)
        W("   +-", "neutralText")
        For l As Integer = 0 To strlen - 1
            W("-", "neutralText")
        Next
        W("-+", "neutralText")
    End Sub
    Public Shared Sub WriteMsg(ByVal TypeID As Integer, ByVal MsgID As Integer)
	Dim BackMessages As String() = {"<OWNER> will be back soon.", "<OWNER> is busy. He will be back soon."}
    	Dim OvernightMsg As String() = {"It seems that <OWNER> will be back overnight", "He'll be back overnight."}
    	Dim RudeMessages As String() = {"Can you go away?", "Go away, <OWNER> will be back soon", "<OWNER> isn't here. Go away."}
        Dim text As String = ""
        Select Case TypeID
            Case 1
                text = ParsePlaces(BackMessages(MsgID))
            Case 2
                text = ParsePlaces(OvernightMsg(MsgID))
            Case 3
                text = ParsePlaces(RudeMessages(MsgID))
        End Select
        InitializeBar(text.Length)
        W("   | {0} |", "neutralText", text)
        InitializeBar(text.Length)
    End Sub
12. O c??digo deve ficar assim:
    Imports System
    Imports System.Threading
    Imports KS.Screensaver
    Imports KS.TextWriterColor
    Imports KS.Login
    Public Class SoonOvernightRude
    	Implements ICustomSaver
    	Property Initialized As Boolean Implements ICustomSaver.Initialized
    	Public SOR_Random As New Random() 'Initializes the random number generator
    	Public S_Random As New Random() 'Initializes the random number generator
    	Public O_Random As New Random() 'Initializes the random number generator
    	Public R_Random As New Random() 'Initializes the random number generator
    	Sub InitSaver() Implements ICustomSaver.InitSaver
            W("Set this screensaver as default using ""setsaver SORSS.m""", "neutralText")
            Initialized = True
    	End Sub
    	Sub PreDisplay() Implements ICustomSaver.PreDisplay
    	End Sub
    	Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
	        Console.Clear()
	        If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
                Exit For
            End If
    	    Dim SOR_Integer As Integer = SOR_Random.Next(1, 4) 'Chooses whether it's Soon, Overnight or Rude
    	    Dim Soon_MsgID As Integer = S_Random.Next(0, 2) 'Selects messages in the Soon array
    	    Dim Over_MsgID As Integer = O_Random.Next(0, 2) 'Selects messages in the Overnight array
    	    Dim Rude_MsgID As Integer = R_Random.Next(0, 3) 'Selects messages in the Rude array
            Console.SetCursorPosition(0, 1)
            Select Case SOR_Integer
            	Case 1 'Soon
                    WriteMsg(SOR_Integer, Soon_MsgID)
            	Case 2 'Overnight
                    WriteMsg(SOR_Integer, Over_MsgID)
            	Case 3 'Rude
                    WriteMsg(SOR_Integer, Rude_MsgID)
            End Select
	    Thread.Sleep(10000)
    	End Sub
    	Public Shared Function ParsePlaces(ByVal text As String)
            text = text.Replace("<OWNER>", signedinusrnm)
            Return text
        End Function
        Public Shared Sub InitializeBar(ByVal strlen As Integer)
            W("   +-", "neutralText")
            For l As Integer = 0 To strlen - 1
            	W("-", "neutralText")
            Next
            W("-+", "neutralText")
        End Sub
        Public Shared Sub WriteMsg(ByVal TypeID As Integer, ByVal MsgID As Integer)
	        Dim BackMessages As String() = {"<OWNER> will be back soon.", "<OWNER> is busy. He will be back soon."}
    	    Dim OvernightMsg As String() = {"It seems that <OWNER> will be back overnight", "He'll be back overnight."}
    	    Dim RudeMessages As String() = {"Can you go away?", "Go away, <OWNER> will be back soon", "<OWNER> isn't here. Go away."}
            Dim text As String = ""
            Select Case TypeID
            	Case 1
                    text = ParsePlaces(BackMessages(MsgID))
            	Case 2
                    text = ParsePlaces(OvernightMsg(MsgID))
            	Case 3
                    text = ParsePlaces(RudeMessages(MsgID))
            End Select
            InitializeBar(text.Length)
            W("   | {0} |", "neutralText", text)
            InitializeBar(text.Length)
    	End Sub
    End Class
13. Execute a constru????o. 
14. Execute o seu Simulador de Kernel que voc?? acabou de referenciar em seu projeto, e carregue, configure como padr??o e execute o savescreen.

2. tela simples em branco

1. Repita as etapas de 1 a 4 no primeiro exemplo: mensagens na caixa do console e mensagens em breve, noturno ou rude (v?? embora ...)
2. Escreva acima da classe p??blica em branco (supondo que o nome da sua classe seja em branco):
    - Imports System
    - Imports KS.Screensaver
3. Escreva estes abaixo dos Implementos ICustomSaver:
    Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    Public Sub InitSaver() Implements ICustomSaver.InitSaver
        Initialized = True
    End Sub
    Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
    Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
    
    End Sub
4. Escreva dentro do submarino ScrnSaver:
    Console.Clear()
5. O c??digo deve ficar assim:
    Imports System
    Imports KS.Screensaver
    Public Class Blank
    	Implements ICustomSaver
    	Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    	Public Sub InitSaver() Implements ICustomSaver.InitSaver
            Initialized = True
    	End Sub
    	Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    	End Sub
    	Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
            Console.Clear()
   		End Sub
    End Class
5. Repita as etapas 13 a 14 no primeiro exemplo: mensagens na caixa de mensagens do console e mensagens em breve, noturno ou rude (v?? embora ...)

3. Anima????o (Desenho C??rculo - 4 quadros - 4 FPS)

Este exemplo ir?? ajud??-lo com as anima????es. 

Imports System
Imports Microsoft.VisualBasic.Constants
Imports KS.TextWriterColor
Imports System.Threading
Imports KS.Screensaver
Public Class ANI
    Implements ICustomSaver
    Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    Public CurrentStep As Integer
    Public Sub InitSaver() Implements ICustomSaver.InitSaver
        Initialized = True
    End Sub
    Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
    Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
        For CurrentStep = 0 To 3
            Console.Clear()
	        If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
                Exit For
            End If
            W(aniset(CurrentStep), "neutralText")
            Thread.Sleep(150)
        Next
    End Sub

    Public aniset As String() = {"                mmhyo/-         " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                   .:odMMMd/    " + vbNewLine +
                                 "                       .oMMMd.  " + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                ",
                                 "                mmhyo/-         " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                   .:odMMMd/    " + vbNewLine +
                                 "                       .oMMMd.  " + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                       `oMMMd.  " + vbNewLine +
                                 "                   .:odMMMm/    " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                mmhhs/-         ",
                                 "                mmhyo/-         " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                   .:odMMMd/    " + vbNewLine +
                                 "                       .oMMMd.  " + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "hMMo                        oMMh" + vbNewLine +
                                 "+MMm                        mMM+" + vbNewLine +
                                 " mMMy                      yMMm`" + vbNewLine +
                                 " -NMMh`                  `hMMN- " + vbNewLine +
                                 "  .dMMMs`              `oMMMd.  " + vbNewLine +
                                 "    /dMMMdo:.      .:odMMMm/    " + vbNewLine +
                                 "      :yNMMMMMNmmNMMMMMNy:      " + vbNewLine +
                                 "         -/shhmmmmhhs/-         ",
                                 "         -/oydmmmmhyo/-         " + vbNewLine +
                                 "      :yNMMMMMNmmNMMMMMNy:      " + vbNewLine +
                                 "    :dMMMdo:.      .:odMMMd/    " + vbNewLine +
                                 "  .dMMMs.              .oMMMd.  " + vbNewLine +
                                 " -NMMh`                  `hMMN- " + vbNewLine +
                                 " mMMy                      yMMm`" + vbNewLine +
                                 "+MMm                        mMM+" + vbNewLine +
                                 "hMMo                        oMMh" + vbNewLine +
                                 "hMMo                        oMMh" + vbNewLine +
                                 "+MMm                        mMM+" + vbNewLine +
                                 " mMMy                      yMMm`" + vbNewLine +
                                 " -NMMh`                  `hMMN- " + vbNewLine +
                                 "  .dMMMs`              `oMMMd.  " + vbNewLine +
                                 "    /dMMMdo:.      .:odMMMm/    " + vbNewLine +
                                 "      :yNMMMMMNmmNMMMMMNy:      " + vbNewLine +
                                 "         -/shhmmmmhhs/-         "}
End Class

4. Calcular de 0 a 1.000.000 com barra de progresso (din??mica)

Imports System
Imports Microsoft.VisualBasic.Constants
Imports KS.TextWriterColor
Imports Microsoft.VisualBasic.Strings
Imports KS.Screensaver
Public Class Dynamic
    Implements ICustomSaver
    Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    Public Res As Integer
    Public ProgWent As Integer
    Public Check As Integer
    Public oldCheck As Integer
    Public Sub InitSaver() Implements ICustomSaver.InitSaver
        Initialized = True
    End Sub
    Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
    Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
        Console.Clear()
        For Res = 0 To 1000000
            If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
                Exit For
            End If
            Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 5)
            ShowStats()
        Next
        Check = 0 : oldCheck = 0 : ProgWent = 0
    End Sub
    Public Sub ShowStats()
        W("{0} / 1000000 | {1}%", "neutralText", Res, FormatNumber(CStr(Res * 100 / 1000000), 1))
        UpdateProgressBar(Res * 100 / 1000000)
    End Sub
    Public Sub UpdateProgressBar(ByVal percent As String)
        Check = percent / 5
        W(Check, "neutralText")
        Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 3)
        W("+--------------------+", "neutralText")
        Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 2)
        W("| ", "neutralText")
        If Check <> oldCheck Then
            For Went As Integer = 0 To ProgWent
                W("*", "neutralText")
            Next
            ProgWent += 1
        End If
        Console.SetCursorPosition((Console.WindowWidth / 2) + 11, (Console.WindowHeight / 2) - 2)
        W(" |", "neutralText")
        Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 1)
        W("+--------------------+", "neutralText")
        oldCheck = percent / 5
    End Sub
End Class

Mais exemplos

Se voc?? quiser verificar mais exemplos, sinta-se ?? vontade para v??-los no reposit??rio KSModExamples na pasta Screensavers do GitHub.
-BODY END-

-COLOR CONFIGURATION-
screensaver=>Green
savescreen=>DarkGreen
Modding guide=>Green
Compile=>Cyan
Build Events=>Cyan
Post-build event=>Green
End Class=>Cyan
Public Class...=>Cyan
Visual Studio 2017=>Magenta
Imports Implements=>Cyan
ICustomSaver=>Green
KS=>Cyan
TextWriterColor=>Green
KS.TextWriterColor=>Green
Property As Boolean Sub=>Cyan
Initialized ICustomSaver.Initialized=>Green
Kernel Simulator=>Green
Rude=>Red
KSModExamples Screensavers GitHub=>Green
-COLOR CONFIG END-

-SECTIONS-
What is the screensaver for the kernel?=>SE1
Basic modding (screensaver)=>SE1
0. How to make your own screensavers on Visual Studio 2017?=>SE2
1. In-Console Message Box, and Soon, Overnight, or Rude (Go away...) messages=>SE2
2. Simple Blank screen=>SE2
3. Animation (Drawing Circle - 4 frames - 4 FPS)=>SE2
4. Calculate from 0 to 1,000,000 with progress bar (dynamic)=>SE2
More examples=>SE1
-SECTIONS END-
