(*MAN START*)

-TITLE:Bildschirmschoner Modding Guide
-REVISION:0.0.1
-KSLAYOUT:0.0.5.9-OR-ABOVE

-BODY START-
Was ist der Bildschirmschoner f??r den Kernel?

Der Bildschirmschoner ist der Leerlaufprozess, der aktiviert wird, wenn sich Ihr Computer im Leerlauf befindet. 

Der Bildschirmschoner kann auch angepasst werden. Wir zeigen Ihnen, wie Sie Ihren ersten Bildschirmschoner erstellen, vom einfachsten bis zum legend??ren Bildschirmschoner.

Grundmodding (Bildschirmschoner)

0. Wie erstelle ich meine eigenen Bildschirmschoner in Visual Studio 2017?

1. Wiederholen Sie die Schritte 1 bis 8 in der Modding-Anleitung
2. Klicken Sie im Abschnitt Kompilieren auf Ereignisse erstellen und geben Sie dies in die Befehlszeile f??r Ereignisse nach dem Erstellen ein:
	- copy ..\..\ModFile.vb ..\..\..\..\ModFileSS.m (setze SS vor das .m, damit KS es als Bildschirmschoner und nicht als Mod erkennt)
	- del /Q *.* (um sicherzustellen, dass keine Dummy-DLL-Dateien erstellt werden, da wir keine DLL f??r Mods verwenden)
3. Wiederholen Sie die Schritte 9 bis 16 im Modding-Handbuch, ersetzen Sie jedoch den Imports KS.ModParser durch Imports KS.Screensaver
4. Lassen Sie Visual Studio 2017 zwischen den Zeilen Public Class ... und End Class wissen, dass Sie Ihren KS-Bildschirmschoner erstellen, indem Sie Folgendes schreiben: Implementiert ICustomSaver
5. Wenn Sie Namespaces hinzuf??gen m??chten, m??ssen die folgenden Regeln erf??llt sein:
	1) Importieren Sie KS nicht alleine. 
	2) Beim Importieren von Modulen / Klassen wie TextWriterColor wird Folgendes geschrieben: Importiert KS.TextWriterColor
6. Definieren Sie die Eigenschaften f??r die Mod-Informationen, indem Sie das Implements IScript unten platzieren:
    Property Initialized As Boolean Implements ICustomSaver.Initialized
7. Erstellen Sie Ihr Init-Screensaver-Sub mit dem Namen InitSaver (), das den ICustomSaver.InitSaver implementiert, indem Sie Folgendes schreiben:
    Sub InitSaver() Implements ICustomSaver.InitSaver
        'Your code here
	Initialized = True 'Put it anywhere in the sub if you're making If conditions, otherwise, leave it here.
    End Sub
8. Ersetzen Sie jeden Kommentar Ihres Codes hier durch Ihren Code. 
9. Erstellen Sie das Unterelement PreDisplay () f??r die Voranzeige (Wird aufgerufen, bevor der Bildschirmschoner angezeigt wird), das ICustomSaver.PreDisplay implementiert, indem Sie Folgendes schreiben:
    Sub PreDisplay() Implements ICustomSaver.PreDisplay
        'Your code here
    End Sub
10. Erstellen Sie Ihren Anzeigecode (er sollte etwas anzeigen) mit dem Namen ScrnSaver (), der den ICustomSaver.ScrnSaver implementiert, indem Sie Folgendes schreiben:
    Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
        'Your code here
    End Sub
11. Sie k??nnen Ihre Subs ??berall in der Klasse machen, aber wenn:
	1) Sie befinden sich in einer anderen Klasse, dr??cken Sie die Eingabetaste bei End Class und erstellen eine ??ffentliche neue Klasse, in der neue Subs gespeichert werden:
		Public Class AnotherClass
			'Ihre Definitionen unten und damit Ihre Subs, Funktionen, Schnittstellen usw.
		End Class
	2) Sie versuchen, den Bildschirmschoner neu zu initialisieren, indem Sie InitSaver () erneut aufrufen. Versuchen Sie dies zuerst in Ihrer Testumgebung und dann in der Produktionsumgebung, falls dies ordnungsgem???? funktioniert hat.
	Und die folgenden Bedingungen sollten erf??llt sein:
	1) Sie sollten keine Endlosschleife bilden, es sei denn, Sie f??hren sie aus, die beendet werden, wenn die angegebenen Bedingungen erf??llt sind
	2) Sie sollten nicht versuchen, Fehler mit dem Kernel zu verursachen.
	3) Rufen Sie eines der drei Subwoofer auf, die die ICustomSaver-Schnittstelle implementieren. 
12. F??hren Sie den Build aus. 
13. F??hren Sie den Kernel-Simulator aus, auf den Sie gerade in Ihrem Projekt verwiesen haben, und laden Sie, legen Sie die Standardeinstellungen fest und sperren Sie Ihren Bildschirmschoner.

1. In-Console Message Box- und Soon-, Overnight- oder Rude (Go away ...) -Nachrichten

Der Bildschirmschoner im hinteren Meldungsfeld informiert die Benutzer dar??ber, dass der Computerbesitzer nicht mehr anwesend ist oder dass sie nicht mehr anwesend sind, weil wichtige Dinge in ihren Computern vor sich gehen. 

1. Klicken Sie mit der rechten Maustaste auf das Projekt und w??hlen Sie Hinzuf??gen> Klasse
2. Benennen Sie Ihren Bildschirmschoner, aber lassen Sie das .vb intakt. 
3. Klicken Sie auf Hinzuf??gen, und der Code ist fertig.
4. Schreiben Sie unter die (Angenommen, Ihr Mod-Name ist SOR) Public Class SOR: Implementiert ICustomSaver
5. Schreiben Sie ??ber die ??ffentliche Klasse SOR:
   - Imports System
   - Imports System.Threading
   - Imports KS.Screensaver
   - Imports KS.TextWriterColor
   - Imports KS.Login
6. Es sollte eine Fehlermeldung angezeigt werden, dass diese Subs erstellt werden sollen.
7. Erstellen Sie Ihren Startbildschirmschoner-Ereignishandler, indem Sie Folgendes schreiben:
    Property Initialized As Boolean Implements ICustomSaver.Initialized
    Sub InitSaver() Implements ICustomSaver.InitSaver
	W("Load this screensaver using ""loadsaver SORSS.m"" and ""setsaver SORSS.m""", True, "neutralText")
        Initialized = True
    End Sub
8. Da wir vor dem Anzeigen des Bildschirmschoners nichts implementieren, lassen wir dieses Feld leer:
    Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
9. Schreiben Sie ??ber die Eigenschaft Initialized ...:
	Public SOR_Random As New Random () 'Initialisiert den Zufallszahlengenerator
	Public S_Random As New Random () 'Initialisiert den Zufallszahlengenerator
	Public O_Random As New Random () 'Initialisiert den Zufallszahlengenerator
	Public R_Random As New Random () 'Initialisiert den Zufallszahlengenerator
9. Schreiben Sie in das Unterprogramm ScrnSaver ():
    Console.Clear()
    If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
        Exit For
    End If
    Dim SOR_Integer As Integer = SOR_Random.Next(1, 4) 'Chooses whether it's Soon, Overnight or Rude
    Dim Soon_MsgID As Integer = SOR_Random.Next(0, 2) 'Selects messages in the Soon array
    Dim Over_MsgID As Integer = SOR_Random.Next(0, 2) 'Selects messages in the Overnight array
    Dim Rude_MsgID As Integer = SOR_Random.Next(0, 3) 'Selects messages in the Rude array
    Console.SetWindowPosition(0, 1)
    Select Case SOR_Integer
        Case 1 'Soon
            WriteMsg(SOR_Integer, Soon_MsgID)
        Case 2 'Overnight
            WriteMsg(SOR_Integer, Over_MsgID)
        Case 3 'Rude
            WriteMsg(SOR_Integer, Rude_MsgID)
    End Select
    Thread.Sleep(10000)
11. M??glicherweise m??ssen Sie 1 Funktion und 2 Subs erstellen, damit dies funktioniert. 
    Public Shared Function ParsePlaces(ByVal text As String)
        text = text.Replace("<OWNER>", signedinusrnm)
        Return text
    End Function
    Public Shared Sub InitializeBar(ByVal strlen As Integer)
        W("   +-", "neutralText")
        For l As Integer = 0 To strlen - 1
            W("-", "neutralText")
        Next
        W("-+", "neutralText")
    End Sub
    Public Shared Sub WriteMsg(ByVal TypeID As Integer, ByVal MsgID As Integer)
	Dim BackMessages As String() = {"<OWNER> will be back soon.", "<OWNER> is busy. He will be back soon."}
    	Dim OvernightMsg As String() = {"It seems that <OWNER> will be back overnight", "He'll be back overnight."}
    	Dim RudeMessages As String() = {"Can you go away?", "Go away, <OWNER> will be back soon", "<OWNER> isn't here. Go away."}
        Dim text As String = ""
        Select Case TypeID
            Case 1
                text = ParsePlaces(BackMessages(MsgID))
            Case 2
                text = ParsePlaces(OvernightMsg(MsgID))
            Case 3
                text = ParsePlaces(RudeMessages(MsgID))
        End Select
        InitializeBar(text.Length)
        W("   | {0} |", "neutralText", text)
        InitializeBar(text.Length)
    End Sub
12. Der Code sollte folgenderma??en aussehen:
    Imports System
    Imports System.Threading
    Imports KS.Screensaver
    Imports KS.TextWriterColor
    Imports KS.Login
    Public Class SoonOvernightRude
    	Implements ICustomSaver
    	Property Initialized As Boolean Implements ICustomSaver.Initialized
    	Public SOR_Random As New Random() 'Initializes the random number generator
    	Public S_Random As New Random() 'Initializes the random number generator
    	Public O_Random As New Random() 'Initializes the random number generator
    	Public R_Random As New Random() 'Initializes the random number generator
    	Sub InitSaver() Implements ICustomSaver.InitSaver
            W("Set this screensaver as default using ""setsaver SORSS.m""", "neutralText")
            Initialized = True
    	End Sub
    	Sub PreDisplay() Implements ICustomSaver.PreDisplay
    	End Sub
    	Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
	        Console.Clear()
	        If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
                Exit For
            End If
    	    Dim SOR_Integer As Integer = SOR_Random.Next(1, 4) 'Chooses whether it's Soon, Overnight or Rude
    	    Dim Soon_MsgID As Integer = S_Random.Next(0, 2) 'Selects messages in the Soon array
    	    Dim Over_MsgID As Integer = O_Random.Next(0, 2) 'Selects messages in the Overnight array
    	    Dim Rude_MsgID As Integer = R_Random.Next(0, 3) 'Selects messages in the Rude array
            Console.SetCursorPosition(0, 1)
            Select Case SOR_Integer
            	Case 1 'Soon
                    WriteMsg(SOR_Integer, Soon_MsgID)
            	Case 2 'Overnight
                    WriteMsg(SOR_Integer, Over_MsgID)
            	Case 3 'Rude
                    WriteMsg(SOR_Integer, Rude_MsgID)
            End Select
	    Thread.Sleep(10000)
    	End Sub
    	Public Shared Function ParsePlaces(ByVal text As String)
            text = text.Replace("<OWNER>", signedinusrnm)
            Return text
        End Function
        Public Shared Sub InitializeBar(ByVal strlen As Integer)
            W("   +-", "neutralText")
            For l As Integer = 0 To strlen - 1
            	W("-", "neutralText")
            Next
            W("-+", "neutralText")
        End Sub
        Public Shared Sub WriteMsg(ByVal TypeID As Integer, ByVal MsgID As Integer)
	        Dim BackMessages As String() = {"<OWNER> will be back soon.", "<OWNER> is busy. He will be back soon."}
    	    Dim OvernightMsg As String() = {"It seems that <OWNER> will be back overnight", "He'll be back overnight."}
    	    Dim RudeMessages As String() = {"Can you go away?", "Go away, <OWNER> will be back soon", "<OWNER> isn't here. Go away."}
            Dim text As String = ""
            Select Case TypeID
            	Case 1
                    text = ParsePlaces(BackMessages(MsgID))
            	Case 2
                    text = ParsePlaces(OvernightMsg(MsgID))
            	Case 3
                    text = ParsePlaces(RudeMessages(MsgID))
            End Select
            InitializeBar(text.Length)
            W("   | {0} |", "neutralText", text)
            InitializeBar(text.Length)
    	End Sub
    End Class
13. F??hren Sie den Build aus. 
14. F??hren Sie den Kernel-Simulator aus, auf den Sie gerade in Ihrem Projekt verwiesen haben, und laden Sie ihn, legen Sie ihn als Standard fest und f??hren Sie savescreen aus.

2. Einfacher leerer Bildschirm

1. Wiederholen Sie die Schritte 1 bis 4 f??r das erste Beispiel: In-Console Message Box und Soon, Overnight oder Rude (Go away ...)
2. Schreiben Sie ??ber das ??ffentliche Klassenfeld (vorausgesetzt, Ihr Klassenname ist leer):
    - Imports System
    - Imports KS.Screensaver
3. Schreiben Sie diese unter die Implements ICustomSaver:
    Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    Public Sub InitSaver() Implements ICustomSaver.InitSaver
        Initialized = True
    End Sub
    Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
    Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
    
    End Sub
4. Schreiben Sie in das ScrnSaver-Sub:
	Console.Clear()
5. Der Code sollte folgenderma??en aussehen:
    Imports System
    Imports KS.Screensaver
    Public Class Blank
    	Implements ICustomSaver
    	Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    	Public Sub InitSaver() Implements ICustomSaver.InitSaver
            Initialized = True
    	End Sub
    	Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    	End Sub
    	Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
            Console.Clear()
   		End Sub
    End Class
5. Wiederholen Sie die Schritte 13 bis 14 f??r das erste Beispiel: In-Console Message Box und Soon, Overnight oder Rude (Go away ...)

3. Animation (Zeichnungskreis - 4 Frames - 4 FPS)

In diesem Beispiel werden Sie mit den Animationen beginnen. 

Imports System
Imports Microsoft.VisualBasic.Constants
Imports KS.TextWriterColor
Imports System.Threading
Imports KS.Screensaver
Public Class ANI
    Implements ICustomSaver
    Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    Public CurrentStep As Integer
    Public Sub InitSaver() Implements ICustomSaver.InitSaver
        Initialized = True
    End Sub
    Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
    Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
        For CurrentStep = 0 To 3
            Console.Clear()
	        If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
                Exit For
            End If
            W(aniset(CurrentStep), "neutralText")
            Thread.Sleep(150)
        Next
    End Sub

    Public aniset As String() = {"                mmhyo/-         " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                   .:odMMMd/    " + vbNewLine +
                                 "                       .oMMMd.  " + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                " + vbNewLine +
                                 "                                ",
                                 "                mmhyo/-         " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                   .:odMMMd/    " + vbNewLine +
                                 "                       .oMMMd.  " + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                       `oMMMd.  " + vbNewLine +
                                 "                   .:odMMMm/    " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                mmhhs/-         ",
                                 "                mmhyo/-         " + vbNewLine +
                                 "                mNMMMMMNy:      " + vbNewLine +
                                 "                   .:odMMMd/    " + vbNewLine +
                                 "                       .oMMMd.  " + vbNewLine +
                                 "                         `hMMN- " + vbNewLine +
                                 "                           yMMm`" + vbNewLine +
                                 "                            mMM+" + vbNewLine +
                                 "                            oMMh" + vbNewLine +
                                 "hMMo                        oMMh" + vbNewLine +
                                 "+MMm                        mMM+" + vbNewLine +
                                 " mMMy                      yMMm`" + vbNewLine +
                                 " -NMMh`                  `hMMN- " + vbNewLine +
                                 "  .dMMMs`              `oMMMd.  " + vbNewLine +
                                 "    /dMMMdo:.      .:odMMMm/    " + vbNewLine +
                                 "      :yNMMMMMNmmNMMMMMNy:      " + vbNewLine +
                                 "         -/shhmmmmhhs/-         ",
                                 "         -/oydmmmmhyo/-         " + vbNewLine +
                                 "      :yNMMMMMNmmNMMMMMNy:      " + vbNewLine +
                                 "    :dMMMdo:.      .:odMMMd/    " + vbNewLine +
                                 "  .dMMMs.              .oMMMd.  " + vbNewLine +
                                 " -NMMh`                  `hMMN- " + vbNewLine +
                                 " mMMy                      yMMm`" + vbNewLine +
                                 "+MMm                        mMM+" + vbNewLine +
                                 "hMMo                        oMMh" + vbNewLine +
                                 "hMMo                        oMMh" + vbNewLine +
                                 "+MMm                        mMM+" + vbNewLine +
                                 " mMMy                      yMMm`" + vbNewLine +
                                 " -NMMh`                  `hMMN- " + vbNewLine +
                                 "  .dMMMs`              `oMMMd.  " + vbNewLine +
                                 "    /dMMMdo:.      .:odMMMm/    " + vbNewLine +
                                 "      :yNMMMMMNmmNMMMMMNy:      " + vbNewLine +
                                 "         -/shhmmmmhhs/-         "}
End Class

4. Berechnen Sie von 0 bis 1.000.000 mit Fortschrittsanzeige (dynamisch)

Imports System
Imports Microsoft.VisualBasic.Constants
Imports KS.TextWriterColor
Imports Microsoft.VisualBasic.Strings
Imports KS.Screensaver
Public Class Dynamic
    Implements ICustomSaver
    Public Property Initialized As Boolean Implements ICustomSaver.Initialized
    Public Res As Integer
    Public ProgWent As Integer
    Public Check As Integer
    Public oldCheck As Integer
    Public Sub InitSaver() Implements ICustomSaver.InitSaver
        Initialized = True
    End Sub
    Public Sub PreDisplay() Implements ICustomSaver.PreDisplay
    End Sub
    Public Sub ScrnSaver() Implements ICustomSaver.ScrnSaver
        Console.Clear()
        For Res = 0 To 1000000
            If Custom.CancellationPending = True Then 'This will fix the issue for the task being busy.
                Exit For
            End If
            Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 5)
            ShowStats()
        Next
        Check = 0 : oldCheck = 0 : ProgWent = 0
    End Sub
    Public Sub ShowStats()
        W("{0} / 1000000 | {1}%", "neutralText", Res, FormatNumber(CStr(Res * 100 / 1000000), 1))
        UpdateProgressBar(Res * 100 / 1000000)
    End Sub
    Public Sub UpdateProgressBar(ByVal percent As String)
        Check = percent / 5
        W(Check, "neutralText")
        Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 3)
        W("+--------------------+", "neutralText")
        Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 2)
        W("| ", "neutralText")
        If Check <> oldCheck Then
            For Went As Integer = 0 To ProgWent
                W("*", "neutralText")
            Next
            ProgWent += 1
        End If
        Console.SetCursorPosition((Console.WindowWidth / 2) + 11, (Console.WindowHeight / 2) - 2)
        W(" |", "neutralText")
        Console.SetCursorPosition((Console.WindowWidth / 2) - 9, (Console.WindowHeight / 2) - 1)
        W("+--------------------+", "neutralText")
        oldCheck = percent / 5
    End Sub
End Class

Mehr Beispiele

Weitere Beispiele finden Sie im KSModExamples-Repository im Bildschirmschoner-Ordner von GitHub.
-BODY END-

-COLOR CONFIGURATION-
screensaver=>Green
savescreen=>DarkGreen
Modding guide=>Green
Compile=>Cyan
Build Events=>Cyan
Post-build event=>Green
End Class=>Cyan
Public Class...=>Cyan
Visual Studio 2017=>Magenta
Imports Implements=>Cyan
ICustomSaver=>Green
KS=>Cyan
TextWriterColor=>Green
KS.TextWriterColor=>Green
Property As Boolean Sub=>Cyan
Initialized ICustomSaver.Initialized=>Green
Kernel Simulator=>Green
Rude=>Red
KSModExamples Screensavers GitHub=>Green
-COLOR CONFIG END-

-SECTIONS-
What is the screensaver for the kernel?=>SE1
Basic modding (screensaver)=>SE1
0. How to make your own screensavers on Visual Studio 2017?=>SE2
1. In-Console Message Box, and Soon, Overnight, or Rude (Go away...) messages=>SE2
2. Simple Blank screen=>SE2
3. Animation (Drawing Circle - 4 frames - 4 FPS)=>SE2
4. Calculate from 0 to 1,000,000 with progress bar (dynamic)=>SE2
More examples=>SE1
-SECTIONS END-
