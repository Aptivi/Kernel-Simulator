(*MAN START*)

-TITLE:Hoe maak je je eigen mod voor de kernel
-REVISION:0.0.2
-KSLAYOUT:0.0.5.9-OR-ABOVE

-BODY START-
Wat is de mod voor de kernel?

De mod is het broncodebestand dat wordt geladen tijdens het opstarten en kan extensies toevoegen aan de kernel, de shell en alles. 

Dit is handig als u uw eigen uitbreidingen aan de kernel wilt toevoegen, zoals event handlers voor de kernel.

Kan ik mijn eigen screensaver maken?

Ja, maar kijk eerst naar de handleiding van de gebruikershandleiding voor de schermbeveiliger van Screensaver voor instructies over hoe u uw schermbeveiliging kunt toevoegen.

Basismodding

0. Hoe maak je je eigen mods op Visual Studio 2017?

1. Klik op de startpagina op Nieuw project
2. Klik op Leeg project, selecteer VB of C
3. Klik met de rechtermuisknop op Verwijzingen in de Solution Explorer en druk op Referentie toevoegen ...
4. Klik op de knop Bladeren ... en zoek uw Kernel Simulator-uitvoerbestand (het bestand dat u zojuist hebt uitgevoerd)
5. Wanneer u op OK klikt bij Bestand openen, ziet u dat uw KS-uitvoerbare bestanden aan de referentielijst zijn toegevoegd.
6. Zorg ervoor dat het selectievakje aangevinkt is en klik op OK.
7. Klik met de rechtermuisknop op het project, niet op de oplossing
8. Wijzig het toepassingstype in Class Library
9. Klik in het gedeelte Compileren op Gebeurtenissen maken en noteer dit op de opdrachtregel van de opdracht Post-build:
  Als u VB gebruikt:
	- copy ..\..\ModFile.vb ..\..\..\..\ModFile.m
	- del /Q *.* (om er zeker van te zijn dat er geen dummy DLL-bestanden worden aangemaakt omdat we geen DLL gebruiken voor mods)
	- "path\to\Kernel Simulator.exe" testMods ModFile.m
  Als u C gebruikt
	- copy ..\..\ModFile.cs ..\..\..\..\ModFileCS.m
	- del /Q *.* (om er zeker van te zijn dat er geen dummy DLL-bestanden worden aangemaakt omdat we geen DLL gebruiken voor mods)
	- "path\to\Kernel Simulator.exe" testMods ModFileCS.m
10. Zorg ervoor dat de post-build-gebeurtenis alleen wordt uitgevoerd als de build is voltooid
11. Sla alles op door op CTRL S te drukken
12. Vouw het gedeelte Verwijzingen in de Solution Explorer uit
13. Stel de instelling Copy Local in op False aangezien u het uitvoerbare bestand hebt, zodat u geen extra kopie maakt
14. Klik met de rechtermuisknop op het project en ga naar Add> Class
15. Stel dat u een mod in VB maakt. 
16. Klik op Toevoegen en de code is klaar:
	Public Class ModName
		'Je code hier
	End Class
17. Laat tussen de klassen Public Class ... en End Class Visual Studio 2017 weten dat u uw KS-mod gaat maken door te schrijven: Implements IScript
18. Als u naamruimten gaat toevoegen, moet aan deze regels worden voldaan:
	1) Importeer KS niet zelf. 
	2) Bij het importeren van modules / klassen zoals TextWriterColor is het zo geschreven: Import KS.TextWriterColor
19. Definieer eigenschappen voor mod-informatie door hieronder het Implements IScript te plaatsen:
	Property Cmd As String Implements IScript.Cmd
	Property Def As String Implements IScript.Def
	Property Name As String Implements IScript.Name
	Property Version As String Implements IScript.Version
20. Maak van je start mod sub genaamd StartMod () die het IScript.StartMod implementeert, door te schrijven:
	Sub StartMod () Implements IScript.StartMod
		Cmd = "" 'Als je commando's gaat toevoegen, schrijf dan hier je commando.
		Def = "" 'Leg uit wat je opdracht is en wat het gaat doen.
		Name = "ModName" 'Vervang ModName door uw mod-naam, wat u maar wilt, maar het MOET het mod-doel weergeven. 
		Version = "1.0" 'U kunt uw mod-versie specificeren, maar deze moet de richtlijnen voor het aanpassen van versies volgen en u kunt deze vinden op internet. 

		'Je code hieronder
	End Sub
21. Vervang elke code onder de opmerking door uw code. 
22. Maak je mod stop-sub met de naam StopMod () die het IScript.StopMod implementeert, door te schrijven:
	Sub StopMod () Implements IScript.StopMod
		'Je code hieronder
	End Sub
23. 1) Schrijf de antwoordcode hieronder als je je opdracht in je mod uitvoert:
		Sub PerformCmd (optioneel ByVal args As String = "") Implements IScript.PerformCmd
			'Je code hieronder
		End Sub
	2) Als u een opdracht aan het maken bent die argumenten afgeeft, noteer dan hieronder de antwoordcode:
		Sub PerformCmd (optioneel ByVal args As String = "") Implements IScript.PerformCmd
			If (args = "YourArgHere") Then 'Replace YourArgsHere with your arguments set
				'Je code hieronder
			End If
		End Sub
	3) Schrijf de onderstaande antwoordcode als u uw opdracht uitvoert die volgende argumenten verwerkt:
       Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
	   Dim splitArgs As String() = args.Split({" "c})
           If splitArgs.Length > 1 Then
               If (splitArgs(0) = "Part1" And splitArgs(1) = "Part2") Then 'Replace Part1 with your argument, and Part2 with your argument. You can also replace the splitArgs(0) = "Part1" And splitArgs(1) = "Part2" with your statement
                   'Your code below
               Else
                   'Your argument mismatch code below
               End If
           Else
               'Your code that handles not enough arguments
           End If
       End Sub
24. 1) Als je je gebeurtenishandler maakt die handelt wat er in de kernel is gebeurd, schrijf je de onderstaande handlecode:
       Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
           If (ev = "EventName") Then 'Replace EventName with events that is found on "usermanual Events for Mod Developers" command
	           'Your code below
	       End If
       End Sub
	2) Als u meerdere gebeurtenissen verwerkt, schrijft u de onderstaande handlecode:
       Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
           If (ev = "EventName") Then 'Replace EventName with events that is found on "usermanual Events for Mod Developers" command
	           'Your code below
	       ElseIf (ev = "AnotherEvent") Then ' Replace AnotherEvent with events that is found on "usermanual Events for Mod Developers" command
               'Your code below
	       End If
       End Sub
	3) BELANGRIJKE AANWIJZING! 
25. Je kunt je subs overal in de klas maken, maar als:
	1) ze staan ??????in de andere klasse, drukken op Enter op End Class en maken een openbare nieuwe klasse waarin nieuwe subs worden opgeslagen:
		Public Class AnotherClass
			'Je definities hieronder, en dus je subs, functies, interfaces, etc.
		End Class
	2) ze proberen de mod opnieuw te initialiseren door StartMod opnieuw te starten (), Probeer het eerst op je testomgeving, dan op de productieomgeving als dat goed werkt.
	En aan de volgende voorwaarden moet worden voldaan:
	1) Ze zouden geen oneindige lus moeten maken, tenzij je ze maakt die verdwijnen als aan bepaalde voorwaarden is voldaan
	2) Ze zouden niet moeten proberen fouten met de kernel te veroorzaken.
	3) Als u een uitbuiter bent en de exploit-code voor de kernel aan het maken bent, doe dit dan eerst in uw testomgeving en daarna in de productieomgeving, en maak vervolgens uw CVE-rapport zodat we de aandacht krijgen en dat snel oplossen.
	4) Als je mod de kernel gaat uitbreiden, plaats je je extensiecodes op afzonderlijke subs
	5) Zet ??je sub-oproep op een van de vier subs die de IScript-interface implementeren. 
26. Voer de build uit. 
27. Voer je Kernel-simulator uit waar je zojuist naar hebt verwezen in je project.

1. Hallo wereld op Kernel Start en Goodbye World on Kernel Stop

Hello World is het populaire startvoorbeeld voor alle programmeurs. 

1. Klik met de rechtermuisknop op het project en ga naar Add> Class
2. Geef je mod een naam, maar laat de .vb intact. 
3. Klik op Toevoegen en de code is klaar.
4. Schrijf hieronder (neem aan dat uw mod naam HelloGuys is) Openbare klasse HelloGuys: implementeert IScript
5. Schrijf boven de openbare klasse HelloGuys:
   - Imports KS.ModParser
   - Imports KS.TextWriterColor
6. U zou fouten moeten krijgen die zeggen dat deze subs moeten worden aangemaakt.
7. Maak je start mod event handler door te schrijven:
    Property Cmd As String Implements IScript.Cmd
    Property Def As String Implements IScript.Def
    Property Name As String Implements IScript.Name
    Property Version As String Implements IScript.Version
    Sub StartMod() Implements IScript.StartMod
        Cmd = ""
        Def = ""
        Name = "HelloGuys"
        Version = "1.0"
        W("Hello World", True, "neutralText")
    End Sub
8. Maak uw stop event handler door te schrijven:
	Sub StopMod() Implements IScript.StopMod
		W("Goodbye World", "neutralText")
	End Sub
9. Omdat we geen opdrachten of reacties van gebeurtenissen implementeren, laten we deze leeg:
	Sub PerformCmd (Optional ByVal args As String = "") Implements IScript.PerformCmd
	End Sub
	Sub InitEvents (ByVal ev As String) Implements IScript.InitEvents
	End Sub
10. De code zou er als volgt uit moeten zien in VB:

    Imports KS.ModParser
    Imports KS.TextWriterColor
    Public Class HelloGuys
    	Implements IScript
	Property Cmd As String Implements IScript.Cmd
    	Property Def As String Implements IScript.Def
    	Property Name As String Implements IScript.Name
    	Property Version As String Implements IScript.Version
    	Sub StartMod() Implements IScript.StartMod
            Cmd = ""
            Def = ""
            Name = "HelloGuys"
            Version = "1.0"
            W("Hello World", True, "neutralText")
    	End Sub
    	Sub StopMod() Implements IScript.StopMod
            W("Goodbye World", True, "neutralText")
    	End Sub
    	Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
    	End Sub
    	Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
    	End Sub
    End Class

... of in C#:

    using MP = KS.ModParser;
    using TWC = KS.TextWriterColor;
	public class HelloGuys : MP.IScript
	{
	public string Cmd {get; set;}
		public string Def {get; set;}
		public string Name {get; set;}
		public string Version {get; set;}
		public void StartMod()
		{
			Cmd = "";
			Def = "";
			Name = "HelloGuys";
			Version = "1.0";
			TWC.W("Hello World", True, "neutralText");
		}
		public void StopMod()
		{
			TWC.W("Goodbye World", True, "neutralText");
		}
		public void PerformCmd(string args = "")
		{
		}
		public void InitEvents(string ev)
		{
		}
	}

11. Voer de build uit. 
12. Voer je Kernel-simulator uit waar je zojuist naar hebt verwezen in je project.
13. Als alles goed gaat, ziet u de volgende berichten:
	mod: Mods laden ...
	Hallo Wereld
	HelloGuys v1.0 is gestart

2. Hello World op commando wordt uitgevoerd

1. Herhaal stap 1-5 van het eerste voorbeeld: Hello World on Kernel Start and Goodbye World on Kernel Stop
2. Maak je start mod event-handler door te schrijven (ervan uitgaande dat je mod-naam HelloShell is):
    Property Cmd As String Implements IScript.Cmd
    Property Def As String Implements IScript.Def
    Property Name As String Implements IScript.Name
    Property Version As String Implements IScript.Version
    Sub StartMod() Implements IScript.StartMod
        Cmd = "SayHello"
        Def = ""
        Name = "HelloShell"
        Version = "1.0"
    End Sub
3. Aangezien we geen shutdown-handler of reactie-uitgevers implementeren, laten we deze leeg:
    Sub StopMod() Implements IScript.StopMod
    End Sub
    Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
    End Sub
4. Maak uw opdrachtbehandelaar en laat deze reageren op de SayHello mod-opdracht:
    Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
		W("Hello World", True, "neutralText")
    End Sub
5. De code zou er als volgt uit moeten zien in VB:

    Imports KS.ModParser
    Imports KS.TextWriterColor
    Public Class HelloShell
    	Implements IScript
	Property Cmd As String Implements IScript.Cmd
    	Property Def As String Implements IScript.Def
    	Property Name As String Implements IScript.Name
    	Property Version As String Implements IScript.Version
    	Sub StartMod() Implements IScript.StartMod
            Cmd = "SayHello"
            Def = ""
            Name = "HelloShell"
            Version = "1.0"
    	End Sub
    	Sub StopMod() Implements IScript.StopMod
    	End Sub
    	Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
	    W("Hello World", True, "neutralText")
    	End Sub
    	Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
    	End Sub
    End Class

... of in C#:

	using MP = KS.ModParser;
    using TWC = KS.TextWriterColor;
	public class HelloShell : MP.IScript
	{
	public string Cmd {get; set;}
		public string Def {get; set;}
		public string Name {get; set;}
		public string Version {get; set;}
		public void StartMod()
		{
			Cmd = "SayHello";
			Def = "";
			Name = "HelloShell";
			Version = "1.0";
		}
		public void StopMod()
		{
		}
		public void PerformCmd(string args = "")
		{
		TWC.W("Hello World", True, "neutralText");
		}
		public void InitEvents(string ev)
		{
		}
	}

6. Herhaal stap 11-12 bij het eerste voorbeeld: Hello World op Kernel Start en Goodbye World op Kernel Stop

3. Hello World op commando voer uit met argumenten (enkel)

1. Ervan uitgaande dat je mod-naam HelloArgs is, zal je argument dat je commando laat zeggen Hallo Wereld is HW, en dat je commando SayHello is, Herhaal de stappen 1-3 op het tweede voorbeeld: Hello World on command execute
2. Maak je opdrachtbehandelaar en laat deze reageren op de SayHello mod-opdracht:
    Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
	If (args = "HW") Then
	    W("Hello World", True, "neutralText")
	Else
	    W("Make me say Hello by running ""SayHello HW.""", True, "neutralText")
	End If
    End Sub
3. De code zou er als volgt uit moeten zien in VB:

    Imports KS.ModParser
    Imports KS.TextWriterColor
    Public Class HelloArgs
    	Implements IScript
	Property Cmd As String Implements IScript.Cmd
    	Property Def As String Implements IScript.Def
    	Property Name As String Implements IScript.Name
    	Property Version As String Implements IScript.Version
    	Sub StartMod() Implements IScript.StartMod
            Cmd = "SayHello"
            Def = ""
            Name = "HelloArgs"
            Version = "1.0"
    	End Sub
    	Sub StopMod() Implements IScript.StopMod
    	End Sub
    	Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
	    If (args = "HW") Then
	    	W("Hello World", True, "neutralText")
	    Else
	    	W("Make me say Hello by running ""SayHello HW.""", True, "neutralText")
	    End If
        End Sub
    	Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
    	End Sub
    End Class

... of in C

	using MP = KS.ModParser;
    using TWC = KS.TextWriterColor;
	public class HelloArgs : MP.IScript
	{
	public string Cmd {get; set;}
		public string Def {get; set;}
		public string Name {get; set;}
		public string Version {get; set;}
		public void StartMod()
		{
			Cmd = "SayHello";
			Def = "";
			Name = "HelloArgs";
			Version = "1.0";
		}
		public void StopMod()
		{
		}
		public void PerformCmd(string args = "")
		{
		if (args == "HW")
		{
			TWC.W("Hello World", True, "neutralText");
		}
		else
		{
			TWC.W("Make me say Hello by running \"SayHello HW.\"", True, "neutralText");
		}
		}
		public void InitEvents(string ev)
		{
		}
	}

4. Herhaal de laatste stap van het tweede voorbeeld: Hello World on command execute

4. Hello World op commando wordt uitgevoerd met meerdere argumenten

1. Ervan uitgaande dat je mod-naam HelloArgs is, zal je argument dat je commando laat zeggen Hallo wereld is hallo zeggen, en dat je commando WhatDoISay is, Herhaal stappen 1-3 op het tweede voorbeeld: Hello World on command execute
2. Maak uw opdrachtbehandelaar en laat deze reageren op de WhatDoISay mod-opdracht:
    Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
	Dim splitArgs As String() = args.Split({" "c})
        Dim ArgCount As Integer = 1
        If splitArgs.Length > 1 Then
            If (splitArgs(0) = "Say" And splitArgs(1) = "Hello") Then
                W("Hello World", True, "neutralText")
            Else
                W("Make me say Hello by running ""WhatDoISay Say Hello.""", True, "neutralText")
            End If
        Else
            W("Make me say Hello by running ""WhatDoISay Say Hello.""", True, "neutralText")
        End If
        For Each arg As String In splitArgs
            W("Argument {0}: {1}", True, "neutralText", ArgCount, splitArgs(ArgCount - 1))
            ArgCount += 1
        Next
    End Sub
3. De code zou er als volgt uit moeten zien in VB:

    Imports KS.ModParser
    Imports KS.TextWriterColor
    Public Class HelloArgs
    	Implements IScript
	Property Cmd As String Implements IScript.Cmd
    	Property Def As String Implements IScript.Def
    	Property Name As String Implements IScript.Name
    	Property Version As String Implements IScript.Version
    	Sub StartMod() Implements IScript.StartMod
            Cmd = "WhatDoISay"
            Def = ""
            Name = "HelloArgs"
            Version = "1.0"
    	End Sub
    	Sub StopMod() Implements IScript.StopMod
    	End Sub
    	Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
	    Dim splitArgs As String() = args.Split({" "c})
            Dim ArgCount As Integer = 1
            If splitArgs.Length > 1 Then
            	If (splitArgs(0) = "Say" And splitArgs(1) = "Hello") Then
                    W("Hello World", True, "neutralText")
            	Else
                    W("Make me say Hello by running ""WhatDoISay Say Hello.""", True, "neutralText")
            	End If
            Else
            	W("Make me say Hello by running ""WhatDoISay Say Hello.""", True, "neutralText")
            End If
            For Each arg As String In splitArgs
            	W("Argument {0}: {1}", True, "neutralText", ArgCount, splitArgs(ArgCount - 1))
            	ArgCount += 1
            Next
        End Sub
    	Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
    	End Sub
    End Class

... of in C#:

    using MP = KS.ModParser;
    using TWC = KS.TextWriterColor;
	public class HelloArgs : MP.IScript
	{
		public string Cmd {get; set;}
		public string Def {get; set;}
		public string Name {get; set;}
		public string Version {get; set;}
		public void StartMod()
		{
			Cmd = "WhatDoISay";
			Def = "";
			Name = "HelloArgs";
			Version = "1.0";
		}
		public void StopMod()
		{
		}
		public void PerformCmd(string args = "")
		{
		string[] splitArgs = args.Split(new[] {' '});
			int ArgCount = 1;
			if (splitArgs.Length > 1)
			{
				if (splitArgs[0] == "Say" && splitArgs[1] == "Hello")
				{
					TWC.W("Hello World", True, "neutralText");
				}
				else
				{
					TWC.W("Make me say Hello by running \"WhatDoISay Say Hello.\"", True, "neutralText");
				}
			}
			else
			{
				TWC.W("Make me say Hello by running \"WhatDoISay Say Hello.\"", True, "neutralText");
			}
			foreach (string arg in splitArgs)
			{
				TWC.W("Argument {0}: {1}", True, "neutralText", ArgCount, splitArgs[ArgCount - 1]);
				ArgCount += 1;
			}
		}
		public void InitEvents(string ev)
		{
		}
	}

4. Herhaal de laatste stap van het tweede voorbeeld: Hello World on command execute

5. Netwerk snelheidstesten

1. Ervan uitgaande dat uw mod naam InternetSpeed ??????is, en dat uw opdracht getnetspeed is, herhaalt u de stappen 1-3 op het tweede voorbeeld: Hello World on command execute
2. Plaats deze naamruimten boven het bestand:
- Imports System.Net
    - Imports System.Linq
    - Imports System.IO
    - Imports System.Math
    - Imports Microsoft.VisualBasic.Interaction
3. Maak uw command-handler:
    Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
        Dim speeds As Double() = New Double(4) {}
        For i As Integer = 0 To 4
            Dim jQueryFileSize As Integer = 261
            Dim client As New WebClient()
            Dim startTime As DateTime = DateTime.Now
            client.DownloadFile("http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", Environ("USERPROFILE") + "\jQuery.js")
            Dim endTime As DateTime = DateTime.Now
            speeds(i) = Round((jQueryFileSize / (endTime - startTime).TotalSeconds))
        Next
        File.Delete(Environ("USERPROFILE") + "\jQuery.js")
        W("Download speed: {0}KB/s", True, "neutralText", speeds.Average())
    End Sub
4. De code zou er zo uit moeten zien in VB:

    Imports System.Net
    Imports System.Linq
    Imports System.IO
    Imports System.Math
    Imports Microsoft.VisualBasic.Interaction
    Imports KS.ModParser
    Imports KS.TextWriterColor
    Public Class InternetSpeed
    	Implements IScript
    	Property Cmd As String Implements IScript.Cmd
    	Property Def As String Implements IScript.Def
    	Property Name As String Implements IScript.Name
    	Property Version As String Implements IScript.Version
    	Sub StartMod() Implements IScript.StartMod
            Cmd = "getnetspeed"
            Def = ""
            Name = "InternetSpeed"
            Version = "1.0"
    	End Sub
    	Sub StopMod() Implements IScript.StopMod
    	End Sub
    	Sub PerformCmd(Optional ByVal args As String = "") Implements IScript.PerformCmd
            Dim speeds As Double() = New Double(4) {}
            For i As Integer = 0 To 4
            	Dim jQueryFileSize As Integer = 261
            	Dim client As New WebClient()
            	Dim startTime As Date = Date.Now
            	client.DownloadFile("http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", Environ("USERPROFILE") + "\jQuery.js")
            	Dim endTime As Date = Date.Now
            	speeds(i) = Round(jQueryFileSize / (endTime - startTime).TotalSeconds)
            Next
            File.Delete(Environ("USERPROFILE") + "\jQuery.js")
            W("Download speed: {0}KB/s", True, "neutralText", speeds.Average())
    	End Sub
    	Sub InitEvents(ByVal ev As String) Implements IScript.InitEvents
    	End Sub
    End Class

... of in C

    using System;
	using System.Net;
	using System.Linq;
	using System.IO;
	using M = System.Math;
	using MP = KS.ModParser;
	using TWC = KS.TextWriterColor;
	public class InternetSpeed : MP.IScript
	{
		public string Cmd {get; set;}
		public string Def {get; set;}
		public string Name {get; set;}
		public string Version {get; set;}
		public void StartMod()
		{
			Cmd = "getnetspeed";
			Def = "";
			Name = "InternetSpeed";
			Version = "1.0";
		}
		public void StopMod()
		{
		}
		public void PerformCmd(string args = "")
		{
			double[] speeds = new double[5];
			for (int i = 0; i <= 4; i++)
			{
				int jQueryFileSize = 261;
				WebClient client = new WebClient();
				DateTime startTime = DateTime.Now;
				client.DownloadFile("http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", System.Environment.GetEnvironmentVariable("USERPROFILE") + "\\jQuery.js");
				DateTime endTime = DateTime.Now;
				speeds[i] = M.Round(jQueryFileSize / (endTime - startTime).TotalSeconds);
			}
			File.Delete(System.Environment.GetEnvironmentVariable("USERPROFILE") + "\\jQuery.js");
			TWC.W("Download speed: {0}KB/s", True, "neutralText", speeds.Average());
		}
		public void InitEvents(string ev)
		{
		}
	}

5. Herhaal de laatste stap van het tweede voorbeeld: Hello World on command execute

Meer voorbeelden

Als je meer voorbeelden wilt bekijken, kun je deze bekijken in de KSModExamples-repository in GitHub (Nog niet beschikbaar).

bronnen:

1. https://www.aspsnippets.com/Articles/Check-Internet-Connection-Download-Speed-using-C-and-VBNet-in-ASPNet.aspx
-BODY END-

-COLOR CONFIGURATION-
mod=>Green
New Project=>Cyan
Empty Project=>Cyan
References=>Cyan
Solution Explorer=>DarkGreen
Add Reference...=>Cyan
Browse...=>Cyan
Kernel Simulator=>DarkGreen
OK=>Cyan
Open File=>DarkGreen
KS=>DarkGreen
OK.=>Cyan
checked=>Red
project,=>Green
solution=>Red
Class Library=>Cyan
Compile=>DarkGreen
Build Events,=>Cyan
Post-build=>DarkGreen
copy ..\..\ModFile.vb ..\..\..\..\ModFile.m=>Cyan
del /Q *.*=>Cyan
"path\to\Kernel Simulator.exe" testMods ModFile.m=>Cyan
only=>Red
CTRL+S=>Cyan
Copy Local=>Cyan
False=>Red
Add=>Cyan
mod,=>Green
should=>Red
Public=>Cyan
ModName=>DarkGreen
End=>Cyan
Class...=>Cyan
Visual Studio 2017=>Magenta
Implements=>Cyan
IScript=>DarkGreen
KS=>Cyan
TextWriterColor=>Green
Imports=>Cyan
KS.TextWriterColor=>DarkGreen
IScript:=>DarkGreen
Property As String=>Cyan
Cmd Def Name Version=>DarkGreen
IScript.Cmd IScript.Def IScript.Name IScript.Version=>DarkGreen
StartMod() IScript.StartMod=>DarkGreen
"" "ModName" "1.0"=>DarkGreen
Sub=>Cyan
StopMod() IScript.StopMod=>DarkGreen
PerformCmd (ByVal String) IScript.PerformCmd=>DarkGreen
If (args "YourArgHere") Then=>DarkGreen
Dim String() .Split({" "c})=>Cyan
splitArgs.Length 1=>DarkGreen
(splitArgs(0) "Part1" And splitArgs(1) "Part2")=>DarkGreen
Else=>Red
(ev "EventName") IScript.InitEvents=>DarkGreen
ElseIf=>Red
"AnotherEvent")=>DarkGreen
IMPORTANT NOTICE! Never=>Red
subs=>Green
AnotherClass=>DarkGreen
Hello World=>Green
HelloGuys) HelloGuys: HelloGuys=>DarkGreen
KS.ModParser=>DarkGreen
errors=>Red
"HelloGuys"=>DarkGreen
"Hello World", "neutralText"=>DarkGreen
"Goodbye World",=>DarkGreen
mod: Loading mods...=>Green
v1.0 started=>Green
"SayHello" "HelloShell" HelloShell):=>DarkGreen
"HW")=>DarkGreen
"Say" "Hello"=>DarkGreen
"WhatDoISay" "HelloArgs"=>DarkGreen
"Argument {0}: {1}", "neutralText", ArgCount, splitArgs(ArgCount - 1)=>DarkGreen
ArgCount + 1=>DarkGreen
For Each In=>Cyan
arg splitArgs=>DarkGreen
Next=>Cyan
System.Net System.Linq System.IO System.Math Microsoft.VisualBasic.Interaction=>DarkGreen
"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", Environ("USERPROFILE") "\jQuery.js"=>DarkGreen
"Download speed: {0}KB/s", speeds.Average()=>DarkGreen
"getnetspeed" "InternetSpeed" InternetSpeed InternetSpeed, getnetspeed,=>DarkGreen
KSModExamples GitHub=>Green
-COLOR CONFIG END-

-SECTIONS-
What is the mod for the kernel?=>SE1
Can I make my own screensaver?=>SE1
Basic modding=>SE1
0. How to make your own mods on Visual Studio 2017?=>SE2
1. Hello World on Kernel Start, and Goodbye World on Kernel Stop=>SE2
2. Hello World on command execute=>SE2
3. Hello World on command execute with arguments (single)=>SE2
4. Hello World on command execute with multiple arguments=>SE2
5. Network Speed Testing=>SE2
More examples=>SE1
Sources:=>SE1
-SECTIONS END-
