(*MAN START*)

-TITLE:Hoe maak je je eigen mod voor de kernel
-REVISION:0.0.2
-KSLAYOUT:0.0.5.9-OR-ABOVE

-BODY START-
Wat is de mod voor de kernel?

De mod is het broncodebestand dat wordt geladen tijdens het opstarten en kan extensies toevoegen aan de kernel, de shell en alles. 

Dit is handig als u uw eigen uitbreidingen aan de kernel wilt toevoegen, zoals event handlers voor de kernel.

Kan ik mijn eigen screensaver maken?

Ja, maar kijk eerst naar de handleiding van de gebruikershandleiding voor de schermbeveiliger van Screensaver voor instructies over hoe u uw schermbeveiliging kunt toevoegen.

Basismodding

0. Hoe maak je je eigen mods op Visual Studio 2017?

1. Klik op de startpagina op Nieuw project
2. Klik op Leeg project, selecteer VB of C
3. Klik met de rechtermuisknop op Verwijzingen in de Solution Explorer en druk op Referentie toevoegen ...
4. Klik op de knop Bladeren ... en zoek uw Kernel Simulator-uitvoerbestand (het bestand dat u zojuist hebt uitgevoerd)
5. Wanneer u op OK klikt bij Bestand openen, ziet u dat uw KS-uitvoerbare bestanden aan de referentielijst zijn toegevoegd.
6. Zorg ervoor dat het selectievakje aangevinkt is en klik op OK.
7. Klik met de rechtermuisknop op het project, niet op de oplossing
8. Wijzig het toepassingstype in Class Library
9. Klik in het gedeelte Compileren op Gebeurtenissen maken en noteer dit op de opdrachtregel van de opdracht Post-build:
Als u VB gebruikt:
- kopie .. \ .. \ ModFile.vb .. \ .. \ .. \ .. \ ModFile.m
- del / Q *. * (om er zeker van te zijn dat er geen dummy DLL-bestanden worden aangemaakt omdat we geen DLL gebruiken voor mods)
- "path \ to \ Kernel Simulator.exe" testMods ModFile.m
Als u C gebruikt
- copy .. \ .. \ ModFile.cs .. \ .. \ .. \ .. \ ModFileCS.m
- del / Q *. * (om er zeker van te zijn dat er geen dummy DLL-bestanden worden aangemaakt omdat we geen DLL gebruiken voor mods)
- "path \ to \ Kernel Simulator.exe" testMods ModFileCS.m
10. Zorg ervoor dat de post-build-gebeurtenis alleen wordt uitgevoerd als de build is voltooid
11. Sla alles op door op CTRL S te drukken
12. Vouw het gedeelte Verwijzingen in de Solution Explorer uit
13. Stel de instelling Copy Local in op False aangezien u het uitvoerbare bestand hebt, zodat u geen extra kopie maakt
14. Klik met de rechtermuisknop op het project en ga naar Add> Class
15. Stel dat u een mod in VB maakt. 
16. Klik op Toevoegen en de code is klaar:
Public Class ModName
'Je code hier
Eindklasse
17. Laat tussen de klassen Public Class ... en End Class Visual Studio 2017 weten dat u uw KS-mod gaat maken door te schrijven: Implements IScript
18. Als u naamruimten gaat toevoegen, moet aan deze regels worden voldaan:
1) Importeer Kernel_Simulator niet zelf. 
2) Bij het importeren van modules / klassen zoals TextWriterColor is het zo geschreven: Import Kernel_Simulator.TextWriterColor
19. Definieer eigenschappen voor mod-informatie door hieronder het Implements IScript te plaatsen:
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
20. Maak van je start mod sub genaamd StartMod () die het IScript.StartMod implementeert, door te schrijven:
Sub StartMod () Implementeert IScript.StartMod
Cmd = "" 'Als je commando's gaat toevoegen, schrijf dan hier je commando.
Def = "" 'Leg uit wat je opdracht is en wat het gaat doen.
Name = "ModName" 'Vervang ModName door uw mod-naam, wat u maar wilt, maar het MOET het mod-doel weergeven. 
Version = "1.0" 'U kunt uw mod-versie specificeren, maar deze moet de richtlijnen voor het aanpassen van versies volgen en u kunt deze vinden op internet. 

'Je code hieronder
End Sub
21. Vervang elke code onder de opmerking door uw code. 
22. Maak je mod stop-sub met de naam StopMod () die het IScript.StopMod implementeert, door te schrijven:
Sub StopMod () Implementeert IScript.StopMod
'Je code hieronder
End Sub
23. 1) Schrijf de antwoordcode hieronder als je je opdracht in je mod uitvoert:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
'Je code hieronder
End Sub
2) Als u een opdracht aan het maken bent die argumenten afgeeft, noteer dan hieronder de antwoordcode:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
If (args = "YourArgHere") Then 'Replace YourArgsHere with your arguments set
'Je code hieronder
Stop als
End Sub
3) Schrijf de onderstaande antwoordcode als u uw opdracht uitvoert die volgende argumenten verwerkt:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Dim splitArgs As String () = args.Split ({"" c})
If splitArgs.Length> 1 Then
If (splitArgs (0) = "Part1" And splitArgs (1) = "Part2") Vervolgens vervangt u Part1 door uw argument en Part2 door uw argument. 
'Je code hieronder
Anders
'Uw argument mismatch code hieronder
Stop als
Anders
'Uw code die niet voldoende argumenten afhandelt
Stop als
End Sub
24. 1) Als je je gebeurtenishandler maakt die handelt wat er in de kernel is gebeurd, schrijf je de onderstaande handlecode:
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
If (ev = "EventName") Vervolgens vervangt u EventName door events die te vinden zijn in het commando "usermanual Events for Mod Developers"
'Je code hieronder
Stop als
End Sub
2) Als u meerdere gebeurtenissen verwerkt, schrijft u de onderstaande handlecode:
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
If (ev = "EventName") Vervolgens vervangt u EventName door events die te vinden zijn in het commando "usermanual Events for Mod Developers"
'Je code hieronder
ElseIf (ev = "AnotherEvent") Vervolgens vervangt u AnotherEvent door gebeurtenissen die worden gevonden in het commando "usermanual Events for Mod Developers"
'Je code hieronder
Stop als
End Sub
3) BELANGRIJKE AANWIJZING! 
25. Je kunt je subs overal in de klas maken, maar als:
1) ze staan ??????in de andere klasse, drukken op Enter op End Class en maken een openbare nieuwe klasse waarin nieuwe subs worden opgeslagen:
Openbare klasse AnotherClass
'Je definities hieronder, en dus je subs, functies, interfaces, etc.
Eindklasse
2) ze proberen de mod opnieuw te initialiseren door StartMod opnieuw te starten (), Probeer het eerst op je testomgeving, dan op de productieomgeving als dat goed werkt.
En aan de volgende voorwaarden moet worden voldaan:
1) Ze zouden geen oneindige lus moeten maken, tenzij je ze maakt die verdwijnen als aan bepaalde voorwaarden is voldaan
2) Ze zouden niet moeten proberen fouten met de kernel te veroorzaken.
3) Als u een uitbuiter bent en de exploit-code voor de kernel aan het maken bent, doe dit dan eerst in uw testomgeving en daarna in de productieomgeving, en maak vervolgens uw CVE-rapport zodat we de aandacht krijgen en dat snel oplossen.
4) Als je mod de kernel gaat uitbreiden, plaats je je extensiecodes op afzonderlijke subs
5) Zet ??je sub-oproep op een van de vier subs die de IScript-interface implementeren. 
26. Voer de build uit. 
27. Voer je Kernel-simulator uit waar je zojuist naar hebt verwezen in je project.

1. Hallo wereld op Kernel Start en Goodbye World on Kernel Stop

Hello World is het populaire startvoorbeeld voor alle programmeurs. 

1. Klik met de rechtermuisknop op het project en ga naar Add> Class
2. Geef je mod een naam, maar laat de .vb intact. 
3. Klik op Toevoegen en de code is klaar.
4. Schrijf hieronder (neem aan dat uw mod naam HelloGuys is) Openbare klasse HelloGuys: implementeert IScript
5. Schrijf boven de openbare klasse HelloGuys:
- Importeert Kernel_Simulator.ModParser
- Importeert Kernel_Simulator.TextWriterColor
6. U zou fouten moeten krijgen die zeggen dat deze subs moeten worden aangemaakt.
7. Maak je start mod event handler door te schrijven:
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = ""
Def = ""
Name = "HelloGuys"
Versie = "1.0"
Wln ("Hello World", "neutralText")
End Sub
8. Maak uw stop event handler door te schrijven:
Sub StopMod () Implementeert IScript.StopMod
Wln ("Goodbye World", "neutralText")
End Sub
9. Omdat we geen opdrachten of reacties van gebeurtenissen implementeren, laten we deze leeg:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
10. De code zou er als volgt uit moeten zien in VB:

Importeert Kernel_Simulator.ModParser
Importeert Kernel_Simulator.TextWriterColor
Openbare klas HelloGuys
Implementeert IScript
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = ""
Def = ""
Name = "HelloGuys"
Versie = "1.0"
Wln ("Hello World", "neutralText")
End Sub
Sub StopMod () Implementeert IScript.StopMod
Wln ("Goodbye World", "neutralText")
End Sub
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
Eindklasse

... of in C

met behulp van MP = Kernel_Simulator.ModParser;
met behulp van TWC = Kernel_Simulator.TextWriterColor;
openbare klas HelloGuys: MP.IScript
{
openbare string Cmd {get; 
openbare string Def {get; 
public string Naam {get; 
public string Version {get; 
openbare void StartMod ()
{
Cmd = "";
Def = "";
Name = "HelloGuys";
Versie = "1.0";
TWC.Wln ("Hello World", "neutralText");
}
openbare leegte StopMod ()
{
TWC.Wln ("Goodbye World", "neutralText");
}
openbare void PerformCmd (string args = "")
{
}
public void InitEvents (string ev)
{
}
}

11. Voer de build uit. 
12. Voer je Kernel-simulator uit waar je zojuist naar hebt verwezen in je project.
13. Als alles goed gaat, ziet u de volgende berichten:
mod: Mods laden ...
Hallo Wereld
HelloGuys v1.0 is gestart

2. Hello World op commando wordt uitgevoerd

1. Herhaal stap 1-5 van het eerste voorbeeld: Hello World on Kernel Start and Goodbye World on Kernel Stop
2. Maak je start mod event-handler door te schrijven (ervan uitgaande dat je mod-naam HelloShell is):
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = "SayHello"
Def = ""
Name = "HelloShell"
Versie = "1.0"
End Sub
3. Aangezien we geen shutdown-handler of reactie-uitgevers implementeren, laten we deze leeg:
Sub StopMod () Implementeert IScript.StopMod
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
4. Maak uw opdrachtbehandelaar en laat deze reageren op de SayHello mod-opdracht:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Wln ("Hello World", "neutralText")
End Sub
5. De code zou er als volgt uit moeten zien in VB:

Importeert Kernel_Simulator.ModParser
Importeert Kernel_Simulator.TextWriterColor
Openbare klas HelloShell
Implementeert IScript
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = "SayHello"
Def = ""
Name = "HelloShell"
Versie = "1.0"
End Sub
Sub StopMod () Implementeert IScript.StopMod
End Sub
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Wln ("Hello World", "neutralText")
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
Eindklasse

... of in C

met behulp van MP = Kernel_Simulator.ModParser;
met behulp van TWC = Kernel_Simulator.TextWriterColor;
openbare klas HelloShell: MP.IScript
{
openbare string Cmd {get; 
openbare string Def {get; 
public string Naam {get; 
public string Version {get; 
openbare void StartMod ()
{
Cmd = "SayHello";
Def = "";
Name = "HelloShell";
Versie = "1.0";
}
openbare leegte StopMod ()
{
}
openbare void PerformCmd (string args = "")
{
TWC.Wln ("Hello World", "neutralText");
}
public void InitEvents (string ev)
{
}
}

6. Herhaal stap 11-12 bij het eerste voorbeeld: Hello World op Kernel Start en Goodbye World op Kernel Stop

3. Hello World op commando voer uit met argumenten (enkel)

1. Ervan uitgaande dat je mod-naam HelloArgs is, zal je argument dat je commando laat zeggen Hallo Wereld is HW, en dat je commando SayHello is, Herhaal de stappen 1-3 op het tweede voorbeeld: Hello World on command execute
2. Maak je opdrachtbehandelaar en laat deze reageren op de SayHello mod-opdracht:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
If (args = "HW") Then
Wln ("Hello World", "neutralText")
Anders
Wln ("Laat me Hallo zeggen door te lopen" "SayHello HW." "", "NeutralText")
Stop als
End Sub
3. De code zou er als volgt uit moeten zien in VB:

Importeert Kernel_Simulator.ModParser
Importeert Kernel_Simulator.TextWriterColor
Openbare klas HelloArgs
Implementeert IScript
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = "SayHello"
Def = ""
Name = "HelloArgs"
Versie = "1.0"
End Sub
Sub StopMod () Implementeert IScript.StopMod
End Sub
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
If (args = "HW") Then
Wln ("Hello World", "neutralText")
Anders
Wln ("Laat me Hallo zeggen door te lopen" "SayHello HW." "", "NeutralText")
Stop als
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
Eindklasse

... of in C

met behulp van MP = Kernel_Simulator.ModParser;
met behulp van TWC = Kernel_Simulator.TextWriterColor;
openbare klas HelloArgs: MP.IScript
{
openbare string Cmd {get; 
openbare string Def {get; 
public string Naam {get; 
public string Version {get; 
openbare void StartMod ()
{
Cmd = "SayHello";
Def = "";
Name = "HelloArgs";
Versie = "1.0";
}
openbare leegte StopMod ()
{
}
openbare void PerformCmd (string args = "")
{
if (args == "HW")
{
TWC.Wln ("Hello World", "neutralText");
}
anders
{
TWC.Wln ("Laat me Hallo zeggen door \" SayHello HW. \ "", "NeutralText" uit te voeren);
}
}
public void InitEvents (string ev)
{
}
}

4. Herhaal de laatste stap van het tweede voorbeeld: Hello World on command execute

4. Hello World op commando wordt uitgevoerd met meerdere argumenten

1. Ervan uitgaande dat je mod-naam HelloArgs is, zal je argument dat je commando laat zeggen Hallo wereld is hallo zeggen, en dat je commando WhatDoISay is, Herhaal stappen 1-3 op het tweede voorbeeld: Hello World on command execute
2. Maak uw opdrachtbehandelaar en laat deze reageren op de WhatDoISay mod-opdracht:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Dim splitArgs As String () = args.Split ({"" c})
Dim ArgCount As Integer = 1
If splitArgs.Length> 1 Then
If (splitArgs (0) = "Say" And splitArgs (1) = "Hello") Then
Wln ("Hello World", "neutralText")
Anders
Wln ("Laat me hallo zeggen door te draaien" "WhatDoISay Say Hello." "", "NeutralText")
Stop als
Anders
Wln ("Laat me hallo zeggen door te draaien" "WhatDoISay Say Hello." "", "NeutralText")
Stop als
Voor elke arg As-reeks in splitArgs
Wln ("Argument {0}: {1}", "neutralText", ArgCount, splitArgs (ArgCount - 1))
ArgCount = 1
volgende
End Sub
3. De code zou er als volgt uit moeten zien in VB:

Importeert Kernel_Simulator.ModParser
Importeert Kernel_Simulator.TextWriterColor
Openbare klas HelloArgs
Implementeert IScript
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = "WhatDoISay"
Def = ""
Name = "HelloArgs"
Versie = "1.0"
End Sub
Sub StopMod () Implementeert IScript.StopMod
End Sub
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Dim splitArgs As String () = args.Split ({"" c})
Dim ArgCount As Integer = 1
If splitArgs.Length> 1 Then
If (splitArgs (0) = "Say" And splitArgs (1) = "Hello") Then
Wln ("Hello World", "neutralText")
Anders
Wln ("Laat me hallo zeggen door te draaien" "WhatDoISay Say Hello." "", "NeutralText")
Stop als
Anders
Wln ("Laat me hallo zeggen door te draaien" "WhatDoISay Say Hello." "", "NeutralText")
Stop als
Voor elke arg As-reeks in splitArgs
Wln ("Argument {0}: {1}", "neutralText", ArgCount, splitArgs (ArgCount - 1))
ArgCount = 1
volgende
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
Eindklasse

... of in C

met behulp van MP = Kernel_Simulator.ModParser;
met behulp van TWC = Kernel_Simulator.TextWriterColor;
openbare klas HelloArgs: MP.IScript
{
openbare string Cmd {get; 
openbare string Def {get; 
public string Naam {get; 
public string Version {get; 
openbare void StartMod ()
{
Cmd = "WhatDoISay";
Def = "";
Name = "HelloArgs";
Versie = "1.0";
}
openbare leegte StopMod ()
{
}
openbare void PerformCmd (string args = "")
{
string [] splitArgs = args.Split (nieuw [] {''});
int ArgCount = 1;
if (splitArgs.Length> 1)
{
if (splitArgs [0] == "Zeg"
{
TWC.Wln ("Hello World", "neutralText");
}
anders
{
TWC.Wln ("Laat me Hallo zeggen door te draaien \" WhatDoISay Say Hello. \ "", "NeutralText");
}
}
anders
{
TWC.Wln ("Laat me Hallo zeggen door te draaien \" WhatDoISay Say Hello. \ "", "NeutralText");
}
foreach (string arg in splitArgs)
{
TWC.Wln ("Argument {0}: {1}", "neutralText", ArgCount, splitArgs [ArgCount - 1]);
ArgCount = 1;
}
}
public void InitEvents (string ev)
{
}
}

4. Herhaal de laatste stap van het tweede voorbeeld: Hello World on command execute

5. Netwerk snelheidstesten

1. Ervan uitgaande dat uw mod naam InternetSpeed ??????is, en dat uw opdracht getnetspeed is, herhaalt u de stappen 1-3 op het tweede voorbeeld: Hello World on command execute
2. Plaats deze naamruimten boven het bestand:
- Importeert System.Net
- Importeert System.Linq
- Importeert System.IO
- Importeert System.Math
- Importeert Microsoft.VisualBasic.Interaction
3. Maak uw command-handler:
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Dim snelheden als Double () = Nieuw dubbel (4) {}
Voor i As Integer = 0 tot 4
Dim jQueryFileSize As Integer = 261
Dim client als nieuwe WebClient ()
Dim startTime als DateTime = DateTime.Now
client.DownloadFile ("http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", Environ ("USERPROFILE") "\ jQuery.js")
Dim endTime As DateTime = DateTime.Now
snelheden (i) = rond ((jQueryFileSize / (endTime - startTime) .TotalSeconds))
volgende
File.Delete (Environ ("USERPROFILE") "\ jQuery.js")
Wln ("Downloadsnelheid: {0} KB / s", "neutralText", snelheden. Gemiddelde ())
End Sub
4. De code zou er zo uit moeten zien in VB:

Importeert System.Net
Importeert System.Linq
Importeert System.IO
Importeert System.Math
Importeert Microsoft.VisualBasic.Interaction
Importeert Kernel_Simulator.ModParser
Importeert Kernel_Simulator.TextWriterColor
Public Class InternetSpeed
Implementeert IScript
Property Cmd As String implementeert IScript.Cmd
Property Def As String implementeert IScript.Def
Property Name As String implementeert IScript.Name
Eigenschappenversie als tekenreeks implementeert IScript.Version
Sub StartMod () Implementeert IScript.StartMod
Cmd = "getnetspeed"
Def = ""
Name = "InternetSpeed"
Versie = "1.0"
End Sub
Sub StopMod () Implementeert IScript.StopMod
End Sub
Sub PerformCmd (optioneel ByVal args As String = "") Implementeert IScript.PerformCmd
Dim snelheden als Double () = Nieuw dubbel (4) {}
Voor i As Integer = 0 tot 4
Dim jQueryFileSize As Integer = 261
Dim client als nieuwe WebClient ()
Dim startTime As Date = Date.Now
client.DownloadFile ("http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", Environ ("USERPROFILE") "\ jQuery.js")
Dim endTime As Date = Date.Now
snelheden (i) = rond (jQueryFileSize / (endTime - startTime) .TotalSeconds)
volgende
File.Delete (Environ ("USERPROFILE") "\ jQuery.js")
Wln ("Downloadsnelheid: {0} KB / s", "neutralText", snelheden. Gemiddelde ())
End Sub
Sub InitEvents (ByVal ev As String) Implementeert IScript.InitEvents
End Sub
Eindklasse

... of in C

systeem gebruiken;
met behulp van System.Net;
met behulp van System.Linq;
met behulp van System.IO;
met behulp van M = System.Math;
met behulp van MP = Kernel_Simulator.ModParser;
met behulp van TWC = Kernel_Simulator.TextWriterColor;
openbare klasse InternetSpeed: MP.IScript
{
openbare string Cmd {get; 
openbare string Def {get; 
public string Naam {get; 
public string Version {get; 
openbare void StartMod ()
{
Cmd = "getnetspeed";
Def = "";
Name = "InternetSpeed";
Versie = "1.0";
}
openbare leegte StopMod ()
{
}
openbare void PerformCmd (string args = "")
{
dubbele [] snelheden = nieuwe dubbele [5];
voor (int i = 0; i <= 4; i)
{
int jQueryFileSize = 261;
WebClient-client = nieuwe WebClient ();
DateTime startTime = DateTime.Now;
client.DownloadFile ("http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", System.Environment.GetEnvironmentVariable ("USERPROFILE") "\\ jQuery.js");
DateTime endTime = DateTime.Now;
snelheden [i] = M.Round (jQueryFileSize / (endTime - startTime) .TotalSeconds);
}
File.Delete (System.Environment.GetEnvironmentVariable ("USERPROFILE") "\\ jQuery.js");
TWC.Wln ("Downloadsnelheid: {0} KB / s", "neutralText", speeds.Average ());
}
public void InitEvents (string ev)
{
}
}

5. Herhaal de laatste stap van het tweede voorbeeld: Hello World on command execute

Meer voorbeelden

Als je meer voorbeelden wilt bekijken, kun je deze bekijken in de KSModExamples-repository in GitHub (Nog niet beschikbaar).

bronnen:

1. https://www.aspsnippets.com/Articles/Check-Internet-Connection-Download-Speed-using-C-and-VBNet-in-ASPNet.aspx
-BODY END-

-COLOR CONFIGURATION-
mod=>Green
New Project=>Cyan
Empty Project=>Cyan
References=>Cyan
Solution Explorer=>DarkGreen
Add Reference...=>Cyan
Browse...=>Cyan
Kernel Simulator=>DarkGreen
OK=>Cyan
Open File=>DarkGreen
KS=>DarkGreen
OK.=>Cyan
checked=>Red
project,=>Green
solution=>Red
Class Library=>Cyan
Compile=>DarkGreen
Build Events,=>Cyan
Post-build=>DarkGreen
copy ..\..\ModFile.vb ..\..\..\..\ModFile.m=>Cyan
del /Q *.*=>Cyan
"path\to\Kernel Simulator.exe" testMods ModFile.m=>Cyan
only=>Red
CTRL+S=>Cyan
Copy Local=>Cyan
False=>Red
Add=>Cyan
mod,=>Green
should=>Red
Public=>Cyan
ModName=>DarkGreen
End=>Cyan
Class...=>Cyan
Visual Studio 2017=>Magenta
Implements=>Cyan
IScript=>DarkGreen
Kernel_Simulator=>Cyan
TextWriterColor=>Green
Imports=>Cyan
Kernel_Simulator.TextWriterColor=>DarkGreen
IScript:=>DarkGreen
Property As String=>Cyan
Cmd Def Name Version=>DarkGreen
IScript.Cmd IScript.Def IScript.Name IScript.Version=>DarkGreen
StartMod() IScript.StartMod=>DarkGreen
"" "ModName" "1.0"=>DarkGreen
Sub=>Cyan
StopMod() IScript.StopMod=>DarkGreen
PerformCmd (ByVal String) IScript.PerformCmd=>DarkGreen
If (args "YourArgHere") Then=>DarkGreen
Dim String() .Split({" "c})=>Cyan
splitArgs.Length 1=>DarkGreen
(splitArgs(0) "Part1" And splitArgs(1) "Part2")=>DarkGreen
Else=>Red
(ev "EventName") IScript.InitEvents=>DarkGreen
ElseIf=>Red
"AnotherEvent")=>DarkGreen
IMPORTANT NOTICE! Never=>Red
subs=>Green
AnotherClass=>DarkGreen
Hello World=>Green
HelloGuys) HelloGuys: HelloGuys=>DarkGreen
Kernel_Simulator.ModParser=>DarkGreen
errors=>Red
"HelloGuys"=>DarkGreen
"Hello World", "neutralText"=>DarkGreen
"Goodbye World",=>DarkGreen
mod: Loading mods...=>Green
v1.0 started=>Green
"SayHello" "HelloShell" HelloShell):=>DarkGreen
"HW")=>DarkGreen
"Say" "Hello"=>DarkGreen
"WhatDoISay" "HelloArgs"=>DarkGreen
"Argument {0}: {1}", "neutralText", ArgCount, splitArgs(ArgCount - 1)=>DarkGreen
ArgCount + 1=>DarkGreen
For Each In=>Cyan
arg splitArgs=>DarkGreen
Next=>Cyan
System.Net System.Linq System.IO System.Math Microsoft.VisualBasic.Interaction=>DarkGreen
"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js", Environ("USERPROFILE") "\jQuery.js"=>DarkGreen
"Download speed: {0}KB/s", speeds.Average()=>DarkGreen
"getnetspeed" "InternetSpeed" InternetSpeed InternetSpeed, getnetspeed,=>DarkGreen
KSModExamples GitHub=>Green
-COLOR CONFIG END-

-SECTIONS-
What is the mod for the kernel?=>SE1
Can I make my own screensaver?=>SE1
Basic modding=>SE1
0. How to make your own mods on Visual Studio 2017?=>SE2
1. Hello World on Kernel Start, and Goodbye World on Kernel Stop=>SE2
2. Hello World on command execute=>SE2
3. Hello World on command execute with arguments (single)=>SE2
4. Hello World on command execute with multiple arguments=>SE2
5. Network Speed Testing=>SE2
More examples=>SE1
Sources:=>SE1
-SECTIONS END-
