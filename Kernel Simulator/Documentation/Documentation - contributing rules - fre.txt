| --------------- + -> Général <- + --------------- |

- Si vous souhaitez contribuer à Kernel Simulator, les conditions suivantes doivent être remplies:

1. Si vous souhaitez modifier / recoder le noyau principal, assurez-vous d'écrire les modifications correctement et avec soin, en veillant à ne pas endommager les fonctionnalités du noyau principal.
2. Si vous souhaitez ajouter / modifier / supprimer / recoder certaines fonctionnalités souhaitées partout, écrivez les modifications avec soin.
3. Comme tous les développeurs souhaitant contribuer à Kernel Simulator, les modifications doivent être testées. Nous ne voulons pas des résultats, nous ne faisons que tester et dire que cela a été testé. Si vous souhaitez fournir les résultats, nous acceptons toujours votre demande d'extraction.
4. Si vous ne l'avez pas testé et que vous nous avez envoyé une demande d'extraction, nous testerons le code et si nous trouvons que:

   - votre code fonctionne, nous accepterons votre demande de tirage
   - votre code ne fonctionne pas, nous fermerons votre demande de tirage

5. Si vous ne l'avez pas testé et que vous êtes prêt à nous l'envoyer, testez d'abord le code.
6. Si vous souhaitez modifier la documentation, ou d’autres éléments que le codage, ou ajouter des éléments de / nouvelle documentation, n'hésitez pas. Vous pouvez nous en informer.

- Portage vers d'autres systèmes d'exploitation ou langages de programmation autres que le langage d'assemblage (ASM, NASM, ...) ou le langage C / C ++:

Vous devrez peut-être porter Kernel Simulator sous un autre système d'exploitation, tel que Linux, macOS, etc. Et également, à d'autres langages de programmation que C / C ++ ou Assembly.

Le portage vers ASM / C / C ++ est à nous, le propriétaire. Nous ne prendrons en charge aucun de leurs ports avant notre version officielle amorçable du noyau ASM / C / C ++ du noyau, et tous les problèmes les concernant seront immédiatement refusés.

- Si vous souhaitez porter Kernel Simulator sous Linux (testé) ou macOS (non testé) sous Visual Basic:

1. Installez les packages Mono, MonoDevelop et libmono-microsoft-visualbasic10.0-cil. Vous pouvez trouver comment sur leur site officiel.
2. Téléchargez le code source de KS
3. Ouvrez la solution à l'aide de MonoDevelop et exécutez le programme.
4. Signalez tout problème concernant la section Problèmes dans notre rapport KS.

- Si vous souhaitez porter Kernel Simulator sous Sun OS, BSD, Solaris, etc. (non testé):

Cette section est en construction. Si vous avez des instructions, contribuez s'il vous plaît.

Remarque: Si vous souhaitez porter Kernel Simulator dans un autre langage de programmation que Assembly ou C / C ++, n’hésitez pas à le faire.
Remarque: Il nous appartient de porter le noyau à l'intérieur du simulateur de noyau sur Real Computer / VirtualBox à l'aide de Assembly et de C / C ++.
Remarque: le portage du noyau dans le simulateur vers Android / iOS est correct. Vous pouvez faire les modifications appropriées.

| --------------- + -> Autres contributions, numéros, etc. <- + --------------- |

- Signaler des problèmes

Suivez le modèle de conception de rapports de bogues et expliquez-en autant que vous le pouvez. Une explication moins spécifique et un modèle de conception incorrect peuvent entraîner la résolution du problème. Les captures d'écran sont facultatives.

| --------------- + -> Liste de tâches à ajouter au simulateur de noyau <- + --------------- |

Si certaines idées ont disparu, c'est soit fait, soit annulé. (Cette section est supprimée par 0.0.7 et déplacée vers la liste des tâches dans VS2019.)

1. Gestionnaire de fichiers du système hôte interactif (prévu dans la version amorçable)
2. Déplacez chaque documentation vers Wiki dans le référentiel, y compris les pages de manuel, en faisant en sorte que les commandes de page de manuel ouvrent un site Web à Wiki (prévu dans 0.0.7)
3. Liste permanente des noms d'utilisateur et mots de passe (mots de passe sous forme cryptée - en version bêta)

(Si vous avez des idées, modifiez cette section en insérant votre idée.)