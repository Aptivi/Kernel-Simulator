
'    Kernel Simulator  Copyright (C) 2018-2021  EoflaOE
'
'    This file is part of Kernel Simulator
'
'    Kernel Simulator is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 3 of the License, or
'    (at your option) any later version.
'
'    Kernel Simulator is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.
'
'    You should have received a copy of the GNU General Public License
'    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Imports System.ComponentModel

Module TypoDisplay

    Public WithEvents Typo As New BackgroundWorker With {.WorkerSupportsCancellation = True}

    Sub Typo_DoWork(sender As Object, e As DoWorkEventArgs) Handles Typo.DoWork
        Console.Clear()
        Console.CursorVisible = False
        Try
            Dim RandomDriver As New Random()
            Dim CpmSpeedMin As Integer = TypoWritingSpeedMin * 5
            Dim CpmSpeedMax As Integer = TypoWritingSpeedMax * 5
            Dim Strikes As New List(Of String) From {"q`12wsa", "r43edfgt5", "u76yhjki8", "p09ol;'[-=]\", "/';. ", "m,lkjn ", "vbhgfc ", "zxdsa "}
            Dim CapStrikes As New List(Of String) From {"Q~!@WSA", "R$#EDFGT%", "U&^YHJKI*", "P)(OL:""{_+}|", "?"":> ", "M<LKJN ", "VBHGFC ", "ZXDSA "}
            Dim CapSymbols As String = "~!@$#%&^*)(:""{_+}|?><"
            Do While True
                SleepNoBlock(TypoDelay, Typo)
                If Typo.CancellationPending = True Then
                    Wdbg(DebugLevel.W, "Cancellation is pending. Cleaning everything up...")
                    e.Cancel = True
                    SetInputColor()
                    LoadBack()
                    Console.CursorVisible = True
                    Wdbg(DebugLevel.I, "All clean. Typo screensaver stopped.")
                    SaverAutoReset.Set()
                    Exit Do
                Else
                    'Prepare display (make a paragraph indentation)
                    Console.WriteLine()
                    Console.Write("    ")
                    WdbgConditional(ScreensaverDebug, "I", "Indented in {0}, {1}", Console.CursorLeft, Console.CursorTop)

                    'Get struck character and write it
                    For Each StruckChar As Char In TypoWrite
                        If Typo.CancellationPending Then Exit For
                        'Calculate needed milliseconds from two WPM speeds (minimum and maximum)
                        Dim SelectedCpm As Integer = RandomDriver.Next(CpmSpeedMin, CpmSpeedMax)
                        Dim WriteMs As Integer = (60 / SelectedCpm) * 1000
                        WdbgConditional(ScreensaverDebug, "I", "Delay for {0} CPM: {1} ms", SelectedCpm, WriteMs)
                        WdbgConditional(ScreensaverDebug, "I", "Struck character: {0}", StruckChar)

                        'See if the typo is guaranteed
                        Dim Probability As Double = If(TypoMissStrikePossibility >= 80, 80, TypoMissStrikePossibility) / 100
                        Dim TypoGuaranteed As Boolean = Rnd() < Probability
                        If TypoGuaranteed Then
                            'Sometimes, a typo is generated by missing a character.
                            WdbgConditional(ScreensaverDebug, "I", "Made a typo!")
                            Dim MissProbability As Double = If(TypoMissPossibility >= 10, 10, TypoMissPossibility) / 100
                            Dim MissGuaranteed As Boolean = Rnd() < MissProbability
                            If MissGuaranteed Then
                                'Miss is guaranteed. Simulate the missed character
                                WdbgConditional(ScreensaverDebug, "I", "Missed a character!")
                                StruckChar = ""
                            Else
                                'Typo is guaranteed. Select a strike string randomly until the struck key is found in between the characters
                                Dim StrikeCharsIndex As Integer
                                Dim StruckFound As Boolean = False
                                Dim CappedStrike As Boolean = False
                                Dim StrikesString As String = ""
                                WdbgConditional(ScreensaverDebug, "I", "Bruteforcing...")
                                Do Until StruckFound
                                    StrikeCharsIndex = RandomDriver.Next(0, Strikes.Count - 1)
                                    CappedStrike = Char.IsUpper(StruckChar) Or CapSymbols.Contains(StruckChar)
                                    StrikesString = If(CappedStrike, CapStrikes(StrikeCharsIndex), Strikes(StrikeCharsIndex))
                                    StruckFound = Not String.IsNullOrEmpty(StrikesString) AndAlso StrikesString.Contains(StruckChar)
                                    WdbgConditional(ScreensaverDebug, "I", "Strike chars index: {0}", StrikeCharsIndex)
                                    WdbgConditional(ScreensaverDebug, "I", "Capped strike: {0}", CappedStrike)
                                    WdbgConditional(ScreensaverDebug, "I", "Strikes pattern: {0}", StrikesString)
                                    WdbgConditional(ScreensaverDebug, "I", "Found? {0}", StruckFound)
                                Loop
                                WdbgConditional(ScreensaverDebug, "I", "Found!")

                                'Select a random character that is a typo from the selected strike index
                                Dim RandomStrikeIndex As Integer = RandomDriver.Next(0, StrikesString.Length - 1)
                                Dim MistypedChar As Char = StrikesString(RandomStrikeIndex)
                                If "`-=\][';/.,".Contains(MistypedChar) And CappedStrike Then
                                    'The mistyped character is a symbol and the strike is capped. Select a symbol from CapStrikes.
                                    WdbgConditional(ScreensaverDebug, "I", "Mistyped character is a symbol and the strike is capped.")
                                    MistypedChar = CapStrikes(StrikeCharsIndex)(RandomStrikeIndex)
                                End If
                                StruckChar = MistypedChar
                                WdbgConditional(ScreensaverDebug, "I", "Struck character: {0}", StruckChar)
                            End If
                        End If

                        'Write the final character to the console and wait
                        If Not StruckChar = vbNullChar Then Console.Write(StruckChar)
                        SleepNoBlock(WriteMs, Typo)
                    Next

                    'Wait until retry
                    Console.WriteLine()
                    SleepNoBlock(TypoWriteAgainDelay, Typo)
                End If
            Loop
        Catch ex As Exception
            Wdbg(DebugLevel.W, "Screensaver experienced an error: {0}. Cleaning everything up...", ex.Message)
            WStkTrc(ex)
            e.Cancel = True
            SetInputColor()
            LoadBack()
            Console.CursorVisible = True
            Wdbg(DebugLevel.I, "All clean. Typo screensaver stopped.")
            W(DoTranslation("Screensaver experienced an error while displaying: {0}. Press any key to exit."), True, ColTypes.Error, ex.Message)
            SaverAutoReset.Set()
        End Try
    End Sub

End Module
