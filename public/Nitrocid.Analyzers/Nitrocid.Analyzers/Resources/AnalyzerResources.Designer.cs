//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nitrocid.Analyzers.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AnalyzerResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AnalyzerResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Nitrocid.Analyzers.Resources.AnalyzerResources", typeof(AnalyzerResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetConsoleColor(Color, true) not only brings better color support provided by the appropriate VT sequences, but it can also use true color. Console.BackgroundColor only handles 16 colors..
        /// </summary>
        internal static string ConsoleBackColorUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleBackColorUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.BackgroundColor instead of SetConsoleColor(Color, true).
        /// </summary>
        internal static string ConsoleBackColorUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleBackColorUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use SetConsoleColor(Color, true) instead of Console.BackgroundColor.
        /// </summary>
        internal static string ConsoleBackColorUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleBackColorUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetConsoleColor(Color) not only brings better color support provided by the appropriate VT sequences, but it can also use true color. Console.ForegroundColor only handles 16 colors..
        /// </summary>
        internal static string ConsoleForeColorUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleForeColorUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.ForegroundColor instead of SetConsoleColor(Color).
        /// </summary>
        internal static string ConsoleForeColorUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleForeColorUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use SetConsoleColor(Color) instead of Console.ForegroundColor.
        /// </summary>
        internal static string ConsoleForeColorUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleForeColorUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReadLine() provided by the input helper from Nitrocid allows you to seamlessly read a user input with settings provided by Terminaux..
        /// </summary>
        internal static string ConsoleReadLineUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleReadLineUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.ReadLine instead of ReadLine().
        /// </summary>
        internal static string ConsoleReadLineUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleReadLineUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use ReadLine() instead of Console.ReadLine.
        /// </summary>
        internal static string ConsoleReadLineUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleReadLineUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ConsoleExtensions.ResetColors() contains VT sequences that help reset colors in a portable way..
        /// </summary>
        internal static string ConsoleResetColorUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleResetColorUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.ResetColor instead of ConsoleExtensions.ResetColors().
        /// </summary>
        internal static string ConsoleResetColorUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleResetColorUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use ConsoleExtensions.ResetColors() instead of Console.ResetColor.
        /// </summary>
        internal static string ConsoleResetColorUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleResetColorUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetTitle() uses the VT sequence to set the title, while Console.Title works in certain conditions..
        /// </summary>
        internal static string ConsoleTitleUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleTitleUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.Title instead of SetTitle().
        /// </summary>
        internal static string ConsoleTitleUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleTitleUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use SetTitle() instead of Console.Title.
        /// </summary>
        internal static string ConsoleTitleUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleTitleUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ConsoleWrapper makes sure that your console is not a dumb console. This class is a wrapper for the Console class so that it works cross-platform, while Console contains some platform-dependent APIs..
        /// </summary>
        internal static string ConsoleWrapperUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleWrapperUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console instead of ConsoleWrapper.
        /// </summary>
        internal static string ConsoleWrapperUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleWrapperUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use ConsoleWrapper instead of Console.
        /// </summary>
        internal static string ConsoleWrapperUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleWrapperUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextWriterColor.Write() contains workarounds for VT sequences needed for Linux hosts to properly report the correct position post-write. Its overloads also allow you to specify the color and the line writing..
        /// </summary>
        internal static string ConsoleWriteLineUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleWriteLineUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.WriteLine instead of TWC.Write().
        /// </summary>
        internal static string ConsoleWriteLineUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleWriteLineUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TWC.Write() instead of Console.WriteLine.
        /// </summary>
        internal static string ConsoleWriteLineUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleWriteLineUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextWriterColor.Write() contains workarounds for VT sequences needed for Linux hosts to properly report the correct position post-write. Its overloads also allow you to specify the color and the line writing..
        /// </summary>
        internal static string ConsoleWriteUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ConsoleWriteUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Console.Write instead of TWC.Write().
        /// </summary>
        internal static string ConsoleWriteUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ConsoleWriteUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TWC.Write() instead of Console.Write.
        /// </summary>
        internal static string ConsoleWriteUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ConsoleWriteUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CultureManager.CurrentCultStr gives you a current culture that is set by the kernel settings without affecting the host system..
        /// </summary>
        internal static string CurrentUICultureGetNameUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("CurrentUICultureGetNameUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses CultureInfo.CurrentUICulture.Name instead of CultureManager.CurrentCultStr.
        /// </summary>
        internal static string CurrentUICultureGetNameUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CurrentUICultureGetNameUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use CultureManager.CurrentCultStr instead of CultureInfo.CurrentUICulture.Name.
        /// </summary>
        internal static string CurrentUICultureGetNameUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("CurrentUICultureGetNameUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CultureManager.CurrentCult gives you a current culture that is set by the kernel settings without affecting the host system..
        /// </summary>
        internal static string CurrentUICultureGetUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("CurrentUICultureGetUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses CultureInfo.CurrentUICulture instead of CultureManager.CurrentCult.
        /// </summary>
        internal static string CurrentUICultureGetUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CurrentUICultureGetUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use CultureManager.CurrentCult instead of CultureInfo.CurrentUICulture.
        /// </summary>
        internal static string CurrentUICultureGetUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("CurrentUICultureGetUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CultureManager.UpdateCulture() sets a current culture without affecting the host system. It also updates the settings so that it holds the new culture..
        /// </summary>
        internal static string CurrentUICultureSetUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("CurrentUICultureSetUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses CultureInfo.CurrentUICulture instead of CultureManager.UpdateCulture().
        /// </summary>
        internal static string CurrentUICultureSetUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CurrentUICultureSetUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use CultureManager.UpdateCulture() instead of setting CultureInfo.CurrentUICulture.
        /// </summary>
        internal static string CurrentUICultureSetUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("CurrentUICultureSetUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Making.MakeDirectory() neutralizes the provided path to its absolute correct path, while Directory.CreateDirectory operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string DirectoryCreateDirectoryUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("DirectoryCreateDirectoryUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Directory.CreateDirectory instead of Making.MakeDirectory().
        /// </summary>
        internal static string DirectoryCreateDirectoryUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("DirectoryCreateDirectoryUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Making.MakeDirectory() instead of Directory.CreateDirectory.
        /// </summary>
        internal static string DirectoryCreateDirectoryUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("DirectoryCreateDirectoryUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing.RemoveDirectory() neutralizes the provided path to its absolute correct path, while Directory.Delete operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string DirectoryDeleteUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("DirectoryDeleteUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Directory.Delete instead of Removing.RemoveDirectory().
        /// </summary>
        internal static string DirectoryDeleteUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("DirectoryDeleteUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Removing.RemoveDirectory() instead of Directory.Delete.
        /// </summary>
        internal static string DirectoryDeleteUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("DirectoryDeleteUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking.DirectoryExists() neutralizes the provided path to its absolute correct path, while Directory.Exists operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string DirectoryExistsUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("DirectoryExistsUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Directory.Exists instead of Checking.DirectoryExists().
        /// </summary>
        internal static string DirectoryExistsUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("DirectoryExistsUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Checking.DirectoryExists() instead of Directory.Exists.
        /// </summary>
        internal static string DirectoryExistsUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("DirectoryExistsUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alternatively, Listing.GetFileSystemEntries() returns a list of paths to files or folders with better support for patterns. You can also use GetFilesystemEntriesRegex() for regular expression support..
        /// </summary>
        internal static string DirectoryGetFileSystemEntriesAltUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("DirectoryGetFileSystemEntriesAltUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Directory.GetFileSystemEntries instead of Listing.GetFileSystemEntries().
        /// </summary>
        internal static string DirectoryGetFileSystemEntriesAltUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("DirectoryGetFileSystemEntriesAltUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Listing.GetFileSystemEntries() instead of Directory.GetFileSystemEntries.
        /// </summary>
        internal static string DirectoryGetFileSystemEntriesAltUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("DirectoryGetFileSystemEntriesAltUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listing.CreateList() returns a list of FileSystemEntry instances that provides you information about a file, as well as a wrapper to the FileSystemInfo instance for that file..
        /// </summary>
        internal static string DirectoryGetFileSystemEntriesUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("DirectoryGetFileSystemEntriesUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Directory.GetFileSystemEntries instead of Listing.CreateList().
        /// </summary>
        internal static string DirectoryGetFileSystemEntriesUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("DirectoryGetFileSystemEntriesUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Listing.CreateList() instead of Directory.GetFileSystemEntries.
        /// </summary>
        internal static string DirectoryGetFileSystemEntriesUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("DirectoryGetFileSystemEntriesUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copying.CopyFileOrDir() neutralizes the provided paths to their absolute correct paths, while File.Copy operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string FileCopyUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("FileCopyUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses File.Copy instead of Copying.CopyFileOrDir().
        /// </summary>
        internal static string FileCopyUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("FileCopyUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Copying.CopyFileOrDir() instead of File.Copy.
        /// </summary>
        internal static string FileCopyUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("FileCopyUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Making.MakeFile() neutralizes the provided path to its absolute correct path, while File.Create operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string FileCreateUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("FileCreateUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses File.Create instead of Making.MakeFile().
        /// </summary>
        internal static string FileCreateUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("FileCreateUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Making.MakeFile() instead of File.Create.
        /// </summary>
        internal static string FileCreateUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("FileCreateUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing.RemoveFile() neutralizes the provided path to its absolute correct path, while File.Delete operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string FileDeleteUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("FileDeleteUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses File.Delete instead of Removing.RemoveFile().
        /// </summary>
        internal static string FileDeleteUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("FileDeleteUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Removing.RemoveFile() instead of File.Delete.
        /// </summary>
        internal static string FileDeleteUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("FileDeleteUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking.FileExists() neutralizes the provided path to its absolute correct path, while File.Exists operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string FileExistsUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("FileExistsUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses File.Exists instead of Checking.FileExists().
        /// </summary>
        internal static string FileExistsUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("FileExistsUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Checking.FileExists() instead of File.Exists.
        /// </summary>
        internal static string FileExistsUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("FileExistsUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving.MoveFileOrDir() neutralizes the provided paths to their absolute correct paths, while File.Move operates at the executable directory (Environment.CurrentDirectory), which may not be what you want..
        /// </summary>
        internal static string FileMoveUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("FileMoveUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses File.Move instead of Moving.MoveFileOrDir().
        /// </summary>
        internal static string FileMoveUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("FileMoveUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Moving.MoveFileOrDir() instead of File.Move.
        /// </summary>
        internal static string FileMoveUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("FileMoveUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to While NetworkInterface.GetIsNetworkAvailable checks your network, it doesn&apos;t work on Android systems, so it&apos;s better to use NetworkTools.NetworkAvailable. Please note that this will return false if there is no connectivity for Android systems..
        /// </summary>
        internal static string GetIsNetworkAvailableUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("GetIsNetworkAvailableUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses NetworkInterface.GetIsNetworkAvailable instead of NetworkTools.NetworkAvailable.
        /// </summary>
        internal static string GetIsNetworkAvailableUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("GetIsNetworkAvailableUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use NetworkTools.NetworkAvailable instead of NetworkInterface.GetIsNetworkAvailable.
        /// </summary>
        internal static string GetIsNetworkAvailableUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("GetIsNetworkAvailableUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsOnUnix() is more readable and less verbose than RuntimeInformation.IsOSPlatform(OSPlatform.Linux)..
        /// </summary>
        internal static string IsOsPlatformLinuxUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("IsOsPlatformLinuxUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses RuntimeInformation.IsOSPlatform(OSPlatform.Linux) instead of KernelPlatform.IsOnUnix().
        /// </summary>
        internal static string IsOsPlatformLinuxUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("IsOsPlatformLinuxUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsOnUnix() instead of RuntimeInformation.IsOSPlatform(OSPlatform.Linux).
        /// </summary>
        internal static string IsOsPlatformLinuxUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("IsOsPlatformLinuxUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsOnMacOS() is more readable and less verbose than RuntimeInformation.IsOSPlatform(OSPlatform.OSX)..
        /// </summary>
        internal static string IsOsPlatformOSXUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("IsOsPlatformOSXUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses RuntimeInformation.IsOSPlatform(OSPlatform.OSX) instead of KernelPlatform.IsOnMacOS().
        /// </summary>
        internal static string IsOsPlatformOSXUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("IsOsPlatformOSXUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsOnMacOS() instead of RuntimeInformation.IsOSPlatform(OSPlatform.OSX).
        /// </summary>
        internal static string IsOsPlatformOSXUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("IsOsPlatformOSXUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsOnWindows() is more readable and less verbose than RuntimeInformation.IsOSPlatform(OSPlatform.Windows)..
        /// </summary>
        internal static string IsOsPlatformWindowsUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("IsOsPlatformWindowsUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses RuntimeInformation.IsOSPlatform(OSPlatform.Windows) instead of KernelPlatform.IsOnWindows().
        /// </summary>
        internal static string IsOsPlatformWindowsUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("IsOsPlatformWindowsUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsOnWindows() instead of RuntimeInformation.IsOSPlatform(OSPlatform.Windows).
        /// </summary>
        internal static string IsOsPlatformWindowsUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("IsOsPlatformWindowsUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeDateRenderers.RenderDate() respects your kernel settings when rendering date..
        /// </summary>
        internal static string KernelDateTimeToDateStringUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("KernelDateTimeToDateStringUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeDateTools.KernelDateTime.ToString instead of TimeDateRenderers.RenderDate().
        /// </summary>
        internal static string KernelDateTimeToDateStringUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("KernelDateTimeToDateStringUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeDateRenderers.RenderDate() instead of TimeDateTools.KernelDateTime.ToString.
        /// </summary>
        internal static string KernelDateTimeToDateStringUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("KernelDateTimeToDateStringUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeDateRenderersUtc.RenderDateUtc() respects your kernel settings when rendering date..
        /// </summary>
        internal static string KernelDateTimeToDateStringUtcUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("KernelDateTimeToDateStringUtcUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeDateTools.KernelDateTimeUtc.ToString instead of TimeDateRenderersUtc.RenderDateUtc().
        /// </summary>
        internal static string KernelDateTimeToDateStringUtcUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("KernelDateTimeToDateStringUtcUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeDateRenderersUtc.RenderDateUtc() instead of TimeDateTools.KernelDateTimeUtc.ToString.
        /// </summary>
        internal static string KernelDateTimeToDateStringUtcUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("KernelDateTimeToDateStringUtcUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeDateRenderers.Render() respects your kernel settings when rendering date and time..
        /// </summary>
        internal static string KernelDateTimeToStringUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("KernelDateTimeToStringUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeDateTools.KernelDateTime.ToString instead of TimeDateRenderers.Render().
        /// </summary>
        internal static string KernelDateTimeToStringUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("KernelDateTimeToStringUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeDateRenderers.Render() instead of TimeDateTools.KernelDateTime.ToString.
        /// </summary>
        internal static string KernelDateTimeToStringUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("KernelDateTimeToStringUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeDateRenderersUtc.RenderUtc() respects your kernel settings when rendering date and time..
        /// </summary>
        internal static string KernelDateTimeToStringUtcUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("KernelDateTimeToStringUtcUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeDateTools.KernelDateTimeUtc.ToString instead of TimeDateRenderersUtc.RenderUtc().
        /// </summary>
        internal static string KernelDateTimeToStringUtcUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("KernelDateTimeToStringUtcUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeDateRenderersUtc.RenderUtc() instead of TimeDateTools.KernelDateTimeUtc.ToString.
        /// </summary>
        internal static string KernelDateTimeToStringUtcUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("KernelDateTimeToStringUtcUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeDateRenderers.RenderTime() respects your kernel settings when rendering time..
        /// </summary>
        internal static string KernelDateTimeToTimeStringUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("KernelDateTimeToTimeStringUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeDateTools.KernelDateTime.ToString instead of TimeDateRenderers.RenderTime().
        /// </summary>
        internal static string KernelDateTimeToTimeStringUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("KernelDateTimeToTimeStringUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeDateRenderers.RenderTime() instead of TimeDateTools.KernelDateTime.ToString.
        /// </summary>
        internal static string KernelDateTimeToTimeStringUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("KernelDateTimeToTimeStringUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeDateRenderersUtc.RenderTimeUtc() respects your kernel settings when rendering time..
        /// </summary>
        internal static string KernelDateTimeToTimeStringUtcUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("KernelDateTimeToTimeStringUtcUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeDateTools.KernelDateTimeUtc.ToString instead of TimeDateRenderersUtc.RenderTimeUtc().
        /// </summary>
        internal static string KernelDateTimeToTimeStringUtcUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("KernelDateTimeToTimeStringUtcUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeDateRenderersUtc.RenderTimeUtc() instead of TimeDateTools.KernelDateTimeUtc.ToString.
        /// </summary>
        internal static string KernelDateTimeToTimeStringUtcUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("KernelDateTimeToTimeStringUtcUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextTools.SplitNewLines() simplifies the readability of the split by new lines function..
        /// </summary>
        internal static string NewLineSplitCharManagerNewLineUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("NewLineSplitCharManagerNewLineUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses CharManager.NewLine instead of TextTools.SplitNewLines().
        /// </summary>
        internal static string NewLineSplitCharManagerNewLineUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("NewLineSplitCharManagerNewLineUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TextTools.SplitNewLines() instead of CharManager.NewLine.
        /// </summary>
        internal static string NewLineSplitCharManagerNewLineUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("NewLineSplitCharManagerNewLineUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextTools.SplitNewLines() simplifies the readability of the split by new lines function..
        /// </summary>
        internal static string NewLineSplitEnvironmentNewLineUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("NewLineSplitEnvironmentNewLineUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.NewLine instead of TextTools.SplitNewLines().
        /// </summary>
        internal static string NewLineSplitEnvironmentNewLineUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("NewLineSplitEnvironmentNewLineUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TextTools.SplitNewLines() instead of Environment.NewLine.
        /// </summary>
        internal static string NewLineSplitEnvironmentNewLineUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("NewLineSplitEnvironmentNewLineUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextTools.SplitNewLines() simplifies the readability of the split by new lines function..
        /// </summary>
        internal static string NewLineSplitLinuxLiteralUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("NewLineSplitLinuxLiteralUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses .Split(&quot;\n&quot;) instead of TextTools.SplitNewLines().
        /// </summary>
        internal static string NewLineSplitLinuxLiteralUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("NewLineSplitLinuxLiteralUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TextTools.SplitNewLines() instead of .Split(&quot;\n&quot;).
        /// </summary>
        internal static string NewLineSplitLinuxLiteralUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("NewLineSplitLinuxLiteralUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextTools.SplitNewLines() simplifies the readability of the split by new lines function..
        /// </summary>
        internal static string NewLineSplitMacOS9LiteralUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("NewLineSplitMacOS9LiteralUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses .Split(&quot;\r&quot;) instead of TextTools.SplitNewLines().
        /// </summary>
        internal static string NewLineSplitMacOS9LiteralUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("NewLineSplitMacOS9LiteralUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TextTools.SplitNewLines() instead of .Split(&quot;\r&quot;).
        /// </summary>
        internal static string NewLineSplitMacOS9LiteralUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("NewLineSplitMacOS9LiteralUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextTools.SplitNewLines() simplifies the readability of the split by new lines function..
        /// </summary>
        internal static string NewLineSplitWindowsLiteralUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("NewLineSplitWindowsLiteralUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses .Split(&quot;\r\n&quot;) instead of TextTools.SplitNewLines().
        /// </summary>
        internal static string NewLineSplitWindowsLiteralUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("NewLineSplitWindowsLiteralUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TextTools.SplitNewLines() instead of .Split(&quot;\r\n&quot;).
        /// </summary>
        internal static string NewLineSplitWindowsLiteralUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("NewLineSplitWindowsLiteralUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking.Exists() neutralizes the provided path to its absolute correct path, while Path.Exists operates at the executable Path (Environment.CurrentPath), which may not be what you want..
        /// </summary>
        internal static string PathExistsUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("PathExistsUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Path.Exists instead of Checking.Exists().
        /// </summary>
        internal static string PathExistsUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("PathExistsUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Checking.Exists() instead of Path.Exists.
        /// </summary>
        internal static string PathExistsUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("PathExistsUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filesystem.NeutralizePath() neutralizes the provided path to its absolute correct path, but also gives a path separated by the platform-agnostic path separator..
        /// </summary>
        internal static string PathGetFullPathUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("PathGetFullPathUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Path.GetFullPath instead of Filesystem.NeutralizePath().
        /// </summary>
        internal static string PathGetFullPathUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("PathGetFullPathUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Filesystem.NeutralizePath() instead of Path.GetFullPath.
        /// </summary>
        internal static string PathGetFullPathUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("PathGetFullPathUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parsing.GetInvalidPathChars() always returns invalid characters for Windows paths, regardless of the host operating system, while Path.GetInvalidPathChars returns a list of forbidden path characters for an operating system, which may be wrong in .NET 6.0 or later for the following characters: &apos;&quot;&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;..
        /// </summary>
        internal static string PathGetInvalidPathCharsUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("PathGetInvalidPathCharsUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Path.GetInvalidPathChars instead of Parsing.GetInvalidPathChars().
        /// </summary>
        internal static string PathGetInvalidPathCharsUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("PathGetInvalidPathCharsUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Parsing.GetInvalidPathChars() instead of Path.GetInvalidPathChars.
        /// </summary>
        internal static string PathGetInvalidPathCharsUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("PathGetInvalidPathCharsUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking.Rooted() uses the filesystem driver to call Path.IsPathRooted..
        /// </summary>
        internal static string PathIsPathRootedUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("PathIsPathRootedUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Path.IsPathRooted instead of Checking.Rooted().
        /// </summary>
        internal static string PathIsPathRootedUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("PathIsPathRootedUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Checking.Rooted() instead of Path.IsPathRooted.
        /// </summary>
        internal static string PathIsPathRootedUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("PathIsPathRootedUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsOnUnix() is more readable and less verbose than Environment.OSVersion.Platform == PlatformID.Unix..
        /// </summary>
        internal static string PlatformIdUnixUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("PlatformIdUnixUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.OSVersion.Platform == PlatformID.Unix instead of KernelPlatform.IsOnUnix().
        /// </summary>
        internal static string PlatformIdUnixUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("PlatformIdUnixUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsOnUnix() instead of Environment.OSVersion.Platform == PlatformID.Unix.
        /// </summary>
        internal static string PlatformIdUnixUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("PlatformIdUnixUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsOnWindows() is more readable and less verbose than Environment.OSVersion.Platform == PlatformID.Win32NT..
        /// </summary>
        internal static string PlatformIdWin32NtUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("PlatformIdWin32NtUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.OSVersion.Platform == PlatformID.Win32NT instead of KernelPlatform.IsOnWindows().
        /// </summary>
        internal static string PlatformIdWin32NtUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("PlatformIdWin32NtUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsOnWindows() instead of Environment.OSVersion.Platform == PlatformID.Win32NT.
        /// </summary>
        internal static string PlatformIdWin32NtUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("PlatformIdWin32NtUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsRunningFromScreen() is more readable and less verbose than Environment.GetEnvironmentVariable(&quot;STY&quot;)..
        /// </summary>
        internal static string ScreenUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("ScreenUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.GetEnvironmentVariable(&quot;STY&quot;) instead of KernelPlatform.IsRunningFromScreen().
        /// </summary>
        internal static string ScreenUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("ScreenUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsRunningFromScreen() instead of Environment.GetEnvironmentVariable(&quot;STY&quot;).
        /// </summary>
        internal static string ScreenUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("ScreenUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextTools.FormatString() uses the error handler to handle unknown formatting errors and returns the unformatted string if such errors happen, but string.Format() immediately throws..
        /// </summary>
        internal static string StringFormatAnalyzerDescription {
            get {
                return ResourceManager.GetString("StringFormatAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses string.Format() instead of TextTools.FormatString().
        /// </summary>
        internal static string StringFormatAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("StringFormatAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TextTools.FormatString() instead of string.Format().
        /// </summary>
        internal static string StringFormatAnalyzerTitle {
            get {
                return ResourceManager.GetString("StringFormatAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.GetTerminalEmulator() is more readable and less verbose than Environment.GetEnvironmentVariable(&quot;TERM_PROGRAM&quot;)..
        /// </summary>
        internal static string TermProgramUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("TermProgramUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.GetEnvironmentVariable(&quot;TERM_PROGRAM&quot;) instead of KernelPlatform.GetTerminalEmulator().
        /// </summary>
        internal static string TermProgramUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("TermProgramUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.GetTerminalEmulator() instead of Environment.GetEnvironmentVariable(&quot;TERM_PROGRAM&quot;).
        /// </summary>
        internal static string TermProgramUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("TermProgramUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.GetTerminalType() is more readable and less verbose than Environment.GetEnvironmentVariable(&quot;TERM&quot;)..
        /// </summary>
        internal static string TermUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("TermUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.GetEnvironmentVariable(&quot;TERM&quot;) instead of KernelPlatform.GetTerminalType().
        /// </summary>
        internal static string TermUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("TermUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.GetTerminalType() instead of Environment.GetEnvironmentVariable(&quot;TERM&quot;).
        /// </summary>
        internal static string TermUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("TermUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeZones.GetCurrentZoneInfo() gets your local time zone and respects your kernel settings based on that. It either gets your local time zone from your system or from your kernel configuration..
        /// </summary>
        internal static string TimeZoneInfoLocalUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("TimeZoneInfoLocalUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses TimeZoneInfo.Local instead of TimeZones.GetCurrentZoneInfo().
        /// </summary>
        internal static string TimeZoneInfoLocalUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("TimeZoneInfoLocalUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TimeZones.GetCurrentZoneInfo() instead of TimeZoneInfo.Local.
        /// </summary>
        internal static string TimeZoneInfoLocalUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("TimeZoneInfoLocalUsageAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KernelPlatform.IsRunningFromTmux() is more readable and less verbose than Environment.GetEnvironmentVariable(&quot;TMUX&quot;)..
        /// </summary>
        internal static string TmuxUsageAnalyzerDescription {
            get {
                return ResourceManager.GetString("TmuxUsageAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller uses Environment.GetEnvironmentVariable(&quot;TMUX&quot;) instead of KernelPlatform.IsRunningFromTmux().
        /// </summary>
        internal static string TmuxUsageAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("TmuxUsageAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use KernelPlatform.IsRunningFromTmux() instead of Environment.GetEnvironmentVariable(&quot;TMUX&quot;).
        /// </summary>
        internal static string TmuxUsageAnalyzerTitle {
            get {
                return ResourceManager.GetString("TmuxUsageAnalyzerTitle", resourceCulture);
            }
        }
    }
}
