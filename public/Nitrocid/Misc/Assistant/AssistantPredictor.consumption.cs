
// Nitrocid KS  Copyright (C) 2018-2023  Aptivi
// 
// This file is part of Nitrocid KS
// 
// Nitrocid KS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Nitrocid KS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// This file was auto-generated by ML.NET Model Builder. 
using KS.Files;
using Microsoft.ML;
using Microsoft.ML.Data;
using System;

namespace KS.Misc.Assistant
{
    /// <summary>
    /// Assistant predictor
    /// </summary>
    internal partial class AssistantPredictor
    {
        private static string MLNetModelPath =>
            Filesystem.NeutralizePath("AssistantPredictor.zip", Paths.ExecPath);

        #region Model input class
        /// <summary>
        /// Model input class for AssistantPredictor.
        /// </summary>
        public class ModelInput
        {
            [ColumnName(@"Question")]
            public string Question { get; set; }

            [ColumnName(@"Answer")]
            public string Answer { get; set; }

        }

        #endregion

        #region Model output class
        /// <summary>
        /// Model output class for AssistantPredictor.
        /// </summary>
        public class ModelOutput
        {
            [ColumnName(@"Question")]
            public float[] Question { get; set; }

            [ColumnName(@"Answer")]
            public uint Answer { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public string PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        /// <summary>
        /// Prediction engine
        /// </summary>
        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new(CreatePredictEngine, true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
